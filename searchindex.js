Search.setIndex({"docnames": ["apidocs/qiskit_optimization", "apidocs/qiskit_optimization.algorithms", "apidocs/qiskit_optimization.algorithms.qrao", "apidocs/qiskit_optimization.applications", "apidocs/qiskit_optimization.converters", "apidocs/qiskit_optimization.problems", "apidocs/qiskit_optimization.translators", "explanations/index", "explanations/qrao", "getting_started", "index", "migration/01_migration_guide_to_v0.5", "migration/02_migration_guide_to_v0.6", "migration/index", "release_notes", "stubs/qiskit_optimization.QiskitOptimizationError", "stubs/qiskit_optimization.QuadraticProgram", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult", "stubs/qiskit_optimization.algorithms.ADMMOptimizer", "stubs/qiskit_optimization.algorithms.ADMMParameters", "stubs/qiskit_optimization.algorithms.ADMMState", "stubs/qiskit_optimization.algorithms.BaseAggregator", "stubs/qiskit_optimization.algorithms.CobylaOptimizer", "stubs/qiskit_optimization.algorithms.CplexOptimizer", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult", "stubs/qiskit_optimization.algorithms.GroverOptimizer", "stubs/qiskit_optimization.algorithms.GurobiOptimizer", "stubs/qiskit_optimization.algorithms.IntermediateResult", "stubs/qiskit_optimization.algorithms.MeanAggregator", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm", "stubs/qiskit_optimization.algorithms.OptimizationResult", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer", "stubs/qiskit_optimization.algorithms.ScipyMilpOptimizer", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer", "stubs/qiskit_optimization.algorithms.SolutionSample", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer", "stubs/qiskit_optimization.algorithms.qrao.EncodingCommutationVerifier", "stubs/qiskit_optimization.algorithms.qrao.MagicRounding", "stubs/qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding", "stubs/qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult", "stubs/qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer", "stubs/qiskit_optimization.algorithms.qrao.RoundingContext", "stubs/qiskit_optimization.algorithms.qrao.RoundingResult", "stubs/qiskit_optimization.algorithms.qrao.RoundingScheme", "stubs/qiskit_optimization.algorithms.qrao.SemideterministicRounding", "stubs/qiskit_optimization.applications.BinPacking", "stubs/qiskit_optimization.applications.Clique", "stubs/qiskit_optimization.applications.ExactCover", "stubs/qiskit_optimization.applications.GraphOptimizationApplication", "stubs/qiskit_optimization.applications.GraphPartition", "stubs/qiskit_optimization.applications.Knapsack", "stubs/qiskit_optimization.applications.Maxcut", "stubs/qiskit_optimization.applications.NumberPartition", "stubs/qiskit_optimization.applications.OptimizationApplication", "stubs/qiskit_optimization.applications.SKModel", "stubs/qiskit_optimization.applications.SetPacking", "stubs/qiskit_optimization.applications.StableSet", "stubs/qiskit_optimization.applications.Tsp", "stubs/qiskit_optimization.applications.VehicleRouting", "stubs/qiskit_optimization.applications.VertexCover", "stubs/qiskit_optimization.converters.InequalityToEquality", "stubs/qiskit_optimization.converters.IntegerToBinary", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty", "stubs/qiskit_optimization.converters.MaximizeToMinimize", "stubs/qiskit_optimization.converters.MinimizeToMaximize", "stubs/qiskit_optimization.converters.QuadraticProgramConverter", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo", "stubs/qiskit_optimization.infinity.INFINITY", "stubs/qiskit_optimization.problems.Constraint", "stubs/qiskit_optimization.problems.LinearConstraint", "stubs/qiskit_optimization.problems.LinearExpression", "stubs/qiskit_optimization.problems.QuadraticConstraint", "stubs/qiskit_optimization.problems.QuadraticExpression", "stubs/qiskit_optimization.problems.QuadraticObjective", "stubs/qiskit_optimization.problems.QuadraticProgramElement", "stubs/qiskit_optimization.problems.Variable", "stubs/qiskit_optimization.translators.from_docplex_mp", "stubs/qiskit_optimization.translators.from_gurobipy", "stubs/qiskit_optimization.translators.from_ising", "stubs/qiskit_optimization.translators.to_docplex_mp", "stubs/qiskit_optimization.translators.to_gurobipy", "stubs/qiskit_optimization.translators.to_ising", "tutorials/01_quadratic_program", "tutorials/02_converters_for_quadratic_programs", "tutorials/03_minimum_eigen_optimizer", "tutorials/04_grover_optimizer", "tutorials/05_admm_optimizer", "tutorials/06_examples_max_cut_and_tsp", "tutorials/07_examples_vehicle_routing", "tutorials/08_cvar_optimization", "tutorials/09_application_classes", "tutorials/10_warm_start_qaoa", "tutorials/11_using_classical_optimization_solvers_and_models", "tutorials/12_quantum_random_access_optimizer", "tutorials/index"], "filenames": ["apidocs/qiskit_optimization.rst", "apidocs/qiskit_optimization.algorithms.rst", "apidocs/qiskit_optimization.algorithms.qrao.rst", "apidocs/qiskit_optimization.applications.rst", "apidocs/qiskit_optimization.converters.rst", "apidocs/qiskit_optimization.problems.rst", "apidocs/qiskit_optimization.translators.rst", "explanations/index.rst", "explanations/qrao.rst", "getting_started.rst", "index.rst", "migration/01_migration_guide_to_v0.5.rst", "migration/02_migration_guide_to_v0.6.rst", "migration/index.rst", "release_notes.rst", "stubs/qiskit_optimization.QiskitOptimizationError.rst", "stubs/qiskit_optimization.QuadraticProgram.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.rst", "stubs/qiskit_optimization.algorithms.ADMMParameters.rst", "stubs/qiskit_optimization.algorithms.ADMMState.rst", "stubs/qiskit_optimization.algorithms.BaseAggregator.rst", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.rst", "stubs/qiskit_optimization.algorithms.MeanAggregator.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.rst", "stubs/qiskit_optimization.algorithms.ScipyMilpOptimizer.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer.rst", "stubs/qiskit_optimization.algorithms.qrao.EncodingCommutationVerifier.rst", "stubs/qiskit_optimization.algorithms.qrao.MagicRounding.rst", "stubs/qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.rst", "stubs/qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.rst", "stubs/qiskit_optimization.algorithms.qrao.RoundingContext.rst", "stubs/qiskit_optimization.algorithms.qrao.RoundingResult.rst", "stubs/qiskit_optimization.algorithms.qrao.RoundingScheme.rst", "stubs/qiskit_optimization.algorithms.qrao.SemideterministicRounding.rst", "stubs/qiskit_optimization.applications.BinPacking.rst", "stubs/qiskit_optimization.applications.Clique.rst", "stubs/qiskit_optimization.applications.ExactCover.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.rst", "stubs/qiskit_optimization.applications.GraphPartition.rst", "stubs/qiskit_optimization.applications.Knapsack.rst", "stubs/qiskit_optimization.applications.Maxcut.rst", "stubs/qiskit_optimization.applications.NumberPartition.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.rst", "stubs/qiskit_optimization.applications.SKModel.rst", "stubs/qiskit_optimization.applications.SetPacking.rst", "stubs/qiskit_optimization.applications.StableSet.rst", "stubs/qiskit_optimization.applications.Tsp.rst", "stubs/qiskit_optimization.applications.VehicleRouting.rst", "stubs/qiskit_optimization.applications.VertexCover.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.rst", "stubs/qiskit_optimization.converters.IntegerToBinary.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.rst", "stubs/qiskit_optimization.converters.MaximizeToMinimize.rst", "stubs/qiskit_optimization.converters.MinimizeToMaximize.rst", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.rst", "stubs/qiskit_optimization.infinity.INFINITY.rst", "stubs/qiskit_optimization.problems.Constraint.rst", "stubs/qiskit_optimization.problems.LinearConstraint.rst", "stubs/qiskit_optimization.problems.LinearExpression.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.rst", "stubs/qiskit_optimization.problems.QuadraticProgramElement.rst", "stubs/qiskit_optimization.problems.Variable.rst", "stubs/qiskit_optimization.translators.from_docplex_mp.rst", "stubs/qiskit_optimization.translators.from_gurobipy.rst", "stubs/qiskit_optimization.translators.from_ising.rst", "stubs/qiskit_optimization.translators.to_docplex_mp.rst", "stubs/qiskit_optimization.translators.to_gurobipy.rst", "stubs/qiskit_optimization.translators.to_ising.rst", "tutorials/01_quadratic_program.ipynb", "tutorials/02_converters_for_quadratic_programs.ipynb", "tutorials/03_minimum_eigen_optimizer.ipynb", "tutorials/04_grover_optimizer.ipynb", "tutorials/05_admm_optimizer.ipynb", "tutorials/06_examples_max_cut_and_tsp.ipynb", "tutorials/07_examples_vehicle_routing.ipynb", "tutorials/08_cvar_optimization.ipynb", "tutorials/09_application_classes.ipynb", "tutorials/10_warm_start_qaoa.ipynb", "tutorials/11_using_classical_optimization_solvers_and_models.ipynb", "tutorials/12_quantum_random_access_optimizer.ipynb", "tutorials/index.rst"], "titles": ["Qiskit Optimization API Reference", "Optimization algorithms (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.algorithms</span></code>)", "Quantum Random Access Optimization (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.algorithms.qrao</span></code>)", "Optimization applications (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.applications</span></code>)", "Optimization converters (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.converters</span></code>)", "Optimization problems (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.problems</span></code>)", "Quadratic program translators (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.translators</span></code>)", "Qiskit Optimization Explanations", "Background on Quantum Random Access Optimization: <em>Quantum relaxations, quantum random access codes, rounding schemes</em>", "Getting started", "Qiskit Optimization overview", "Qiskit Optimization v0.5 Migration Guide", "Qiskit Optimization v0.6 Migration Guide", "Qiskit Optimization Migration Guide", "Release Notes", "QiskitOptimizationError", "QuadraticProgram", "ADMMOptimizationResult", "ADMMOptimizer", "ADMMParameters", "ADMMState", "BaseAggregator", "CobylaOptimizer", "CplexOptimizer", "GoemansWilliamsonOptimizationResult", "GoemansWilliamsonOptimizer", "GroverOptimizationResult", "GroverOptimizer", "GurobiOptimizer", "IntermediateResult", "MeanAggregator", "MinimumEigenOptimizationResult", "MinimumEigenOptimizer", "MultiStartOptimizer", "OptimizationAlgorithm", "OptimizationResult", "OptimizationResultStatus", "RecursiveMinimumEigenOptimizationResult", "RecursiveMinimumEigenOptimizer", "ScipyMilpOptimizer", "SlsqpOptimizationResult", "SlsqpOptimizer", "SolutionSample", "WarmStartQAOAFactory", "WarmStartQAOAOptimizer", "EncodingCommutationVerifier", "MagicRounding", "QuantumRandomAccessEncoding", "QuantumRandomAccessOptimizationResult", "QuantumRandomAccessOptimizer", "RoundingContext", "RoundingResult", "RoundingScheme", "SemideterministicRounding", "BinPacking", "Clique", "ExactCover", "GraphOptimizationApplication", "GraphPartition", "Knapsack", "Maxcut", "NumberPartition", "OptimizationApplication", "SKModel", "SetPacking", "StableSet", "Tsp", "VehicleRouting", "VertexCover", "InequalityToEquality", "IntegerToBinary", "LinearEqualityToPenalty", "LinearInequalityToPenalty", "MaximizeToMinimize", "MinimizeToMaximize", "QuadraticProgramConverter", "QuadraticProgramToQubo", "INFINITY", "Constraint", "LinearConstraint", "LinearExpression", "QuadraticConstraint", "QuadraticExpression", "QuadraticObjective", "QuadraticProgramElement", "Variable", "from_docplex_mp", "from_gurobipy", "from_ising", "to_docplex_mp", "to_gurobipy", "to_ising", "Quadratic Programs", "Converters for Quadratic Programs", "Minimum Eigen Optimizer", "Grover Optimizer", "ADMM Optimizer", "Max-Cut and Traveling Salesman Problem", "Vehicle Routing", "Improving Variational Quantum Optimization using CVaR", "Application Classes for Optimization Problems", "Warm-starting quantum optimization", "Using Classical Optimization Solvers and Models with Qiskit Optimization", "Quantum Random Access Optimization", "Optimization Tutorials"], "terms": {"0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "6": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "cover": [0, 10, 14, 56, 68], "whole": [0, 10], "rang": [0, 10, 14, 16, 43, 44, 92, 97, 98, 99, 101], "from": [0, 2, 8, 9, 10, 11, 12, 14, 16, 17, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 35, 37, 38, 39, 40, 41, 43, 44, 46, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 86, 88, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103], "high": [0, 2, 10, 66, 67, 103], "level": [0, 2, 10, 85, 98, 99, 103], "model": [0, 6, 10, 14, 16, 23, 28, 55, 63, 72, 86, 87, 89, 90, 93, 95, 96, 97, 99, 101], "problem": [0, 1, 2, 3, 4, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 84, 88, 91, 92, 93, 94, 96, 98, 99, 101, 102], "automat": [0, 2, 9, 10, 14, 71, 72, 76, 86, 94, 99, 102, 103], "convers": [0, 4, 8, 10, 71, 72, 75, 76, 92, 93, 94], "differ": [0, 2, 4, 8, 10, 11, 14, 27, 32, 38, 40, 44, 71, 72, 73, 74, 93, 94, 96, 97, 98, 99, 101, 103], "requir": [0, 2, 9, 10, 16, 46, 72, 75, 93, 95, 97, 98, 103], "represent": [0, 4, 10, 16, 63, 79, 80, 81, 82, 83, 85, 92, 93, 94, 97, 98, 99, 103], "suit": [0, 10], "easi": [0, 10, 57, 62, 97, 101], "us": [0, 2, 7, 8, 9, 10, 11, 12, 14, 16, 18, 19, 22, 23, 26, 27, 28, 32, 33, 34, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 51, 53, 57, 62, 69, 70, 71, 72, 75, 76, 78, 80, 82, 85, 86, 92, 93, 94, 96, 97, 101], "quantum": [0, 7, 10, 14, 18, 27, 43, 44, 46, 47, 48, 49, 70, 93, 94, 95, 100], "algorithm": [0, 8, 9, 10, 11, 12, 14, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 44, 48, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103], "ar": [0, 5, 8, 9, 10, 11, 13, 14, 16, 19, 20, 22, 27, 29, 33, 38, 41, 46, 47, 49, 53, 63, 69, 71, 72, 76, 82, 88, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103], "readi": [0, 10, 98, 103], "run": [0, 9, 10, 14, 19, 22, 23, 27, 28, 32, 33, 34, 38, 39, 41, 44, 95, 96, 98, 99, 103], "classic": [0, 2, 8, 10, 14, 18, 94, 97, 99, 103], "simul": [0, 10, 46, 96, 98, 103], "well": [0, 10, 14, 16, 32, 92, 97, 103], "real": [0, 10, 97, 102], "devic": [0, 10, 94, 96, 97, 103], "via": [0, 2, 10, 16, 19, 22, 37, 41, 80, 82, 96, 98, 102, 103], "thi": [0, 2, 4, 7, 8, 9, 11, 12, 14, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 53, 55, 70, 72, 76, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "enabl": [0, 2, 9, 10, 14, 97, 103], "effici": [0, 9, 10, 14, 96, 97], "docplex": [0, 10, 14, 86, 89, 93, 95, 96, 99, 101], "A": [0, 10, 16, 17, 18, 21, 22, 24, 25, 26, 27, 31, 32, 33, 35, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 72, 73, 74, 76, 77, 85, 91, 92, 94, 95, 96, 97, 98, 103], "uniform": [0, 10, 46], "interfac": [0, 10, 11, 12, 14, 84], "between": [0, 4, 6, 8, 10, 14, 43, 44, 93, 96, 97, 98, 99, 100, 103], "allow": [0, 2, 8, 9, 10, 11, 12, 14, 35, 94, 97, 98, 103], "user": [0, 2, 8, 10, 11, 12, 14, 29, 35, 44, 72, 100, 103], "solv": [0, 2, 8, 10, 11, 12, 14, 18, 19, 20, 22, 23, 25, 27, 28, 32, 33, 34, 35, 38, 39, 41, 44, 49, 69, 70, 71, 72, 76, 93, 95, 96, 97, 98, 99, 100, 101, 102], "larg": [0, 10, 14, 93, 97], "set": [0, 4, 8, 10, 11, 14, 15, 16, 19, 23, 27, 28, 39, 47, 60, 64, 65, 92, 96, 97, 98, 99, 100, 101, 102], "variat": [0, 10, 38, 94, 95, 96, 98, 103], "approxim": [0, 2, 8, 10, 14, 25, 32, 46, 93, 95, 98, 101, 103], "qaoa": [0, 8, 10, 14, 32, 38, 43, 44, 93, 94, 95, 96, 97, 100, 102], "grover": [0, 10, 26, 27], "adapt": [0, 10, 27, 97, 98], "search": [0, 10, 27, 97, 103], "groveroptim": [0, 10, 14, 26, 93, 94, 96], "leverag": [0, 2, 10, 11, 14, 94, 96, 101, 103], "fundament": [0, 10], "minimum": [0, 14, 27, 31, 32, 38, 44, 46, 47, 48, 49, 66, 67, 93, 96, 97, 98, 100, 103], "eigensolv": [0, 32, 44, 46, 48, 49, 95, 96, 97, 98, 99, 100, 103], "provid": [0, 2, 7, 8, 10, 11, 12, 13, 14, 16, 22, 23, 27, 28, 32, 39, 41, 49, 50, 93, 94, 96, 97, 98, 99, 100, 102, 103], "furthermor": [0, 10, 97], "modular": [0, 10], "design": [0, 2, 10, 47, 96, 98, 103], "easili": [0, 10, 92, 100], "extend": [0, 8, 9, 10, 98], "facilit": [0, 10], "rapid": [0, 10], "develop": [0, 9, 10, 14], "test": [0, 9, 10, 96, 99], "new": [0, 2, 8, 9, 10, 12, 35, 63, 70, 76, 80, 82, 85, 96, 97, 98, 103], "compat": [0, 9, 10, 18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76, 93, 98, 103], "also": [0, 8, 10, 11, 14, 28, 92, 93, 94, 95, 96, 97, 98, 100, 103], "valid": [0, 8, 10, 16, 96], "benchmark": [0, 10, 94, 96], "support": [0, 9, 11, 12, 14, 16, 39, 47, 49, 69, 70, 72, 86, 87, 89, 90, 92, 94, 96, 97, 102], "quadrat": [0, 8, 14, 16, 25, 32, 41, 47, 75, 79, 81, 82, 83, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 101, 102, 103], "constrain": [0, 8, 16, 92, 95, 96], "program": [0, 9, 14, 16, 25, 75, 79, 81, 83, 86, 87, 88, 89, 90, 94, 96, 97, 98, 101], "simplic": 0, "we": [0, 2, 8, 11, 12, 14, 82, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "them": [0, 8, 11, 12, 22, 30, 41, 93, 98, 101, 103], "just": [0, 24, 93], "binari": [0, 2, 8, 11, 14, 16, 18, 19, 25, 32, 47, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 86, 87, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103], "integ": [0, 14, 16, 32, 47, 49, 61, 69, 70, 86, 87, 91, 92, 93, 94, 95, 98, 100, 101, 102], "continu": [0, 8, 14, 16, 18, 19, 22, 41, 44, 69, 85, 86, 87, 91, 92, 96, 97, 98, 101], "variabl": [0, 2, 8, 11, 14, 16, 17, 19, 20, 22, 24, 26, 31, 32, 33, 35, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 55, 56, 59, 64, 65, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 86, 87, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "equal": [0, 8, 14, 16, 19, 32, 35, 38, 54, 69, 71, 72, 76, 93, 94, 95, 96, 98, 100, 103], "inequ": [0, 14, 16, 69, 71, 72, 93, 96], "constraint": [0, 8, 11, 14, 16, 19, 22, 32, 38, 39, 47, 69, 70, 71, 72, 76, 79, 81, 86, 87, 91, 93, 94, 95, 96, 97, 98, 100, 101, 103], "class": [0, 2, 5, 9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 92, 93, 94, 96, 98, 101, 103], "ha": [0, 2, 8, 9, 11, 12, 13, 14, 16, 27, 32, 33, 39, 46, 47, 49, 73, 74, 88, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103], "vast": 0, "amount": [0, 95, 97], "relev": [0, 20, 97, 103], "applic": [0, 9, 14, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 103], "while": [0, 14, 93, 95, 98, 99, 101, 103], "still": [0, 14, 16, 95, 97, 99, 101], "being": [0, 9, 20, 37, 40, 92, 94, 95, 97, 98], "matric": [0, 8, 92, 94], "vector": [0, 32, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 92, 96, 98, 100, 101], "some": [0, 8, 9, 14, 16, 72, 92, 97, 98, 99, 102, 103], "veri": [0, 94], "interest": [0, 8, 94, 95, 97], "sub": [0, 33, 92, 98], "convex": [0, 23, 28, 39, 96, 101], "which": [0, 8, 9, 11, 13, 14, 16, 46, 49, 53, 72, 92, 93, 94, 95, 96, 97, 98, 101, 103], "can": [0, 2, 8, 9, 11, 12, 14, 16, 18, 19, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 43, 44, 46, 47, 49, 55, 57, 58, 60, 65, 66, 67, 68, 76, 80, 82, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103], "unconstrain": [0, 8, 32, 47, 71, 93, 94, 95, 99, 101, 103], "qubo": [0, 8, 14, 18, 19, 26, 27, 31, 32, 38, 44, 47, 49, 72, 76, 93, 96, 97, 98, 100, 103], "mani": [0, 8, 93, 94, 97, 98, 101, 103], "np": [0, 35, 48, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 94, 97, 98, 99, 101, 103], "complet": [0, 41, 97, 98, 100], "i": [0, 2, 4, 8, 9, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 32, 33, 34, 37, 38, 39, 41, 43, 44, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 82, 85, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "e": [0, 8, 9, 14, 16, 19, 22, 27, 32, 38, 41, 44, 49, 63, 76, 82, 88, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102], "intract": 0, "In": [0, 8, 9, 38, 76, 92, 93, 94, 95, 96, 97, 98, 99, 103], "addit": [0, 8, 9, 14, 17, 24, 26, 31, 35, 37, 40, 48, 69, 92, 93, 97, 98, 103], "standard": [0, 2, 14, 43, 44, 94, 99, 103], "python": [0, 9, 11, 14, 102], "error": [0, 11, 14, 15, 92, 98], "rais": [0, 11, 14, 16, 18, 22, 23, 27, 28, 32, 33, 34, 35, 38, 39, 41, 43, 44, 46, 47, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "circumst": 0, "cannot": [0, 9, 11, 12, 14, 16, 27, 92], "proce": [0, 98, 103], "The": [2, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103], "modul": [2, 10, 12, 15, 22, 23, 28, 32, 34, 39, 41, 75, 92, 93, 97, 101, 103], "method": [2, 7, 9, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 92, 93, 94, 96, 97, 98, 103], "combinatori": [2, 8, 95, 97, 98], "1": [2, 11, 14, 16, 18, 19, 22, 23, 25, 29, 33, 35, 36, 37, 38, 41, 43, 44, 47, 49, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 72, 82, 88, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103], "approach": [2, 8, 14, 93, 94, 98, 103], "incorpor": [2, 14, 103], "code": [2, 7, 9, 11, 12, 13, 14, 47, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "qrac": [2, 14, 47, 103], "tool": [2, 8, 11, 14, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "multipl": [2, 8, 14, 16, 92, 94, 103], "singl": [2, 8, 14, 94, 95, 97, 98, 101, 102, 103], "qubit": [2, 8, 14, 16, 26, 27, 47, 49, 88, 91, 95, 97, 98, 100, 101, 103], "therebi": [2, 14, 103], "save": [2, 14, 102, 103], "resourc": [2, 11, 12, 14, 103], "explor": [2, 14, 24, 95, 103], "larger": [2, 14, 103], "instanc": [2, 14, 16, 18, 27, 31, 32, 33, 37, 38, 44, 47, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 84, 93, 94, 96, 97, 98, 99, 100, 101, 103], "comput": [2, 8, 14, 17, 18, 19, 20, 25, 32, 44, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 94, 96, 98, 100, 101, 103], "produc": [2, 14, 43, 101, 103], "local": [2, 9, 14, 22, 33, 41, 98, 103], "hamiltonian": [2, 14, 16, 32, 47, 49, 50, 63, 88, 91, 93, 94, 101], "whose": [2, 14, 32, 55, 56, 59, 61, 64, 65, 66, 68, 92, 97, 100, 103], "ground": [2, 14, 32, 93, 94, 101, 103], "state": [2, 11, 12, 14, 17, 20, 32, 38, 43, 44, 47, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 93, 94, 95, 96, 97, 98, 101, 103], "vqe": [2, 8, 14, 93, 94, 95, 96, 97, 98, 99, 103], "yield": [2, 8, 14, 97, 98, 103], "solut": [2, 8, 14, 16, 17, 19, 24, 26, 31, 32, 35, 36, 37, 40, 42, 43, 44, 46, 48, 49, 53, 54, 60, 66, 93, 94, 95, 97, 100, 101, 102], "origin": [2, 4, 8, 11, 14, 17, 24, 26, 31, 32, 35, 37, 40, 47, 48, 55, 57, 58, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "through": [2, 11, 12, 97, 103], "seri": [2, 103], "3": [2, 9, 11, 12, 19, 22, 27, 35, 47, 49, 69, 82, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103], "quantumrandomaccessencod": [2, 14, 45, 48, 49, 50, 103], "relax": [2, 7, 19, 43, 44, 45, 47, 48, 49, 50], "fewer": [2, 95, 103], "semideterministicround": [2, 14, 49, 103], "magicround": 2, "obtain": [2, 8, 14, 31, 35, 36, 37, 43, 48, 51, 94, 96, 97, 98, 101, 102, 103], "back": [2, 8, 70, 71, 72, 73, 74, 93, 94, 98, 103], "quantumrandomaccessoptim": [2, 14], "perform": [2, 8, 14, 26, 46, 52, 53], "util": [2, 11, 14, 94, 95, 97, 98, 99, 100, 101, 103], "capabl": [2, 103], "two": [2, 8, 14, 58, 60, 92, 93, 94, 97, 98, 100, 102], "solve_relax": [2, 14, 49, 103], "seamless": [2, 14], "workflow": [2, 14, 98, 103], "manag": [2, 14], "procedur": [2, 8, 14, 48, 96], "demonstr": [2, 14, 96, 97, 98, 103], "exampl": [2, 8, 11, 14, 16, 22, 23, 28, 32, 35, 38, 41, 69, 70, 76, 82, 93, 94, 95, 97, 98, 100, 101, 103], "below": [2, 13, 14, 92, 94, 95, 98, 101, 103], "simplifi": [2, 14, 103], "streamlin": [2, 14, 103], "experi": [2, 14], "On": [2, 11, 12, 14], "other": [2, 6, 8, 11, 12, 16, 19, 33, 63, 92, 93, 94, 96, 97, 103], "hand": [2, 11, 12, 14, 16, 78, 79, 81, 92], "offer": [2, 8, 14, 93, 97], "flexibl": [2, 14, 103], "break": [2, 8, 14, 103], "process": [2, 8, 11, 12, 14, 19, 46, 49, 97, 102, 103], "distinct": [2, 8, 14, 98, 103], "step": [2, 14, 37, 95, 97, 101], "featur": [2, 9, 86, 101], "advantag": [2, 14, 97], "when": [2, 8, 14, 19, 22, 27, 32, 35, 38, 41, 43, 44, 55, 57, 58, 60, 65, 66, 67, 68, 92, 95, 101, 102, 103], "need": [2, 8, 11, 14, 16, 21, 30, 46, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "compar": [2, 14, 97, 101, 102, 103], "appli": [2, 8, 9, 14, 18, 22, 23, 27, 28, 32, 33, 34, 38, 39, 41, 44, 46, 93, 94, 95, 99, 100, 101, 102, 103], "potenti": [2, 8, 14, 22, 33, 41, 94, 97, 103], "For": [2, 8, 14, 44, 82, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103], "qiskit_algorithm": [2, 12, 14, 32, 38, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "import": [2, 8, 11, 12, 14, 22, 23, 28, 32, 35, 38, 41, 69, 70, 76, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "cobyla": [2, 11, 12, 14, 22, 94, 96, 99, 100, 101, 102, 103], "qiskit": [2, 9, 14, 15, 16, 22, 23, 28, 32, 34, 39, 41, 75, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "circuit": [2, 11, 12, 14, 27, 43, 44, 46, 47, 50, 94, 97, 98, 99, 101, 103], "librari": [2, 11, 12, 14, 97, 98, 99, 103], "realamplitud": [2, 11, 12, 14, 98, 99, 103], "primit": [2, 11, 12, 14, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "estim": [2, 8, 11, 14, 45, 97, 98, 103], "quadraticprogram": [2, 4, 5, 6, 11, 14, 18, 20, 22, 23, 25, 27, 28, 32, 33, 34, 35, 38, 39, 41, 44, 47, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 103], "binary_var": [2, 11, 14, 16, 35, 92, 93, 94, 95, 96, 98, 101, 102], "x": [2, 8, 11, 14, 16, 17, 24, 25, 26, 31, 35, 37, 40, 41, 42, 47, 48, 54, 60, 63, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 88, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103], "y": [2, 8, 11, 14, 16, 19, 41, 54, 72, 88, 92, 93, 94, 95, 97, 98, 102], "z": [2, 8, 14, 16, 66, 72, 88, 92, 93, 94, 97, 98, 102], "minim": [2, 14, 16, 22, 26, 32, 33, 35, 41, 73, 74, 76, 83, 92, 93, 94, 95, 96, 97, 98, 100, 101], "linear": [2, 11, 14, 16, 32, 35, 38, 39, 41, 72, 76, 79, 80, 81, 83, 86, 87, 88, 93, 94, 96, 97, 98, 100, 101, 102], "2": [2, 11, 16, 19, 22, 29, 35, 36, 41, 47, 49, 67, 72, 82, 88, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103], "ansatz": [2, 11, 12, 14, 97, 98, 99, 103], "min_eigen_solv": [2, 11, 12, 14, 32, 44, 49, 98, 100, 103], "result": [2, 4, 8, 11, 12, 14, 16, 17, 18, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102], "onli": [2, 8, 11, 12, 14, 22, 25, 29, 32, 39, 41, 44, 46, 69, 71, 73, 74, 87, 93, 94, 95, 97, 98, 102], "must": [2, 8, 11, 14, 44, 46, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "done": [2, 14, 97], "manual": [2, 14, 97], "max_vars_per_qubit": [2, 14, 47, 49, 103], "relaxed_result": [2, 14, 48, 49, 103], "rounding_context": [2, 14, 46, 52, 53, 103], "bryce": [2, 8, 103], "fuller": [2, 8, 103], "et": [2, 8, 38, 44, 72, 98, 99, 103], "al": [2, 8, 38, 44, 72, 98, 99, 103], "arxiv": [2, 8, 14, 18, 38, 44, 46, 53, 63, 70, 72, 93, 94, 95, 96, 97, 98, 101, 103], "2111": [2, 8, 46, 53, 103], "03167": [2, 8, 46, 53, 103], "common": [3, 93], "have": [4, 8, 9, 11, 14, 84, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "function": [4, 8, 9, 14, 16, 17, 22, 24, 26, 27, 31, 32, 35, 37, 39, 40, 41, 42, 45, 47, 48, 72, 83, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "go": 4, "given": [4, 8, 14, 16, 18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 46, 47, 49, 63, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103], "interpret": [4, 14, 16, 26, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 93, 97, 100], "befor": [4, 8, 14, 26, 44, 93, 94, 98, 102, 103], "return": [4, 8, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 103], "an": [4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 22, 23, 24, 25, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 49, 52, 53, 55, 56, 57, 58, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 80, 82, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "appropri": [4, 8, 14, 97, 103], "optimizationresult": [4, 14, 17, 22, 23, 24, 26, 27, 28, 31, 33, 34, 37, 38, 39, 40, 41, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 94, 96], "structur": 5, "defin": [5, 8, 14, 19, 26, 29, 40, 69, 76, 80, 82, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103], "follow": [5, 8, 9, 11, 12, 13, 14, 16, 35, 47, 72, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "intend": [5, 8], "instanti": [5, 16, 98], "directli": [5, 8, 14, 55, 57, 58, 60, 65, 66, 67, 68, 94, 97, 102, 103], "object": [5, 6, 8, 14, 16, 17, 19, 20, 21, 22, 24, 26, 30, 31, 32, 33, 35, 37, 39, 40, 41, 42, 43, 45, 47, 48, 50, 51, 71, 72, 76, 83, 84, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "type": [5, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 103], "avail": [5, 53, 96, 97, 98, 100, 101, 103], "within": [5, 8, 22, 23, 28, 32, 39, 41, 98, 99, 100, 103], "optim": [6, 9, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 75, 76, 83, 92, 93, 98], "section": [7, 8, 13, 92, 95, 100, 102, 103], "document": [7, 8, 11, 12, 14, 40, 92, 103], "background": 7, "around": [7, 14, 95, 97, 98], "techniqu": [7, 95, 103], "etc": 7, "both": [7, 8, 11, 14, 27, 93, 94, 96, 97, 101, 102, 103], "random": [7, 14, 25, 46, 47, 48, 49, 53, 63, 66, 67, 95, 97, 98, 99, 100], "access": [7, 9, 11, 12, 14, 47, 48, 49, 92, 96], "round": [7, 14, 46, 48, 49, 50, 51, 52, 53], "scheme": [7, 14, 38, 46, 49, 52, 53, 94, 103], "materi": [8, 97], "deeper": 8, "look": [8, 92, 93, 101], "concept": [8, 94], "behind": 8, "consid": [8, 19, 94, 97, 98, 99, 103], "m_i": 8, "choic": [8, 97, 98], "pm": [8, 14, 63, 97], "instead": [8, 9, 11, 12, 14, 55, 94, 96, 103], "conveni": [8, 93, 97, 102, 103], "term": [8, 14, 16, 25, 32, 38, 71, 72, 81, 88, 92, 93, 94, 96, 97, 98, 99, 101], "notat": [8, 98], "begin": [8, 14, 72, 92, 95, 101, 103], "re": [8, 93, 94, 101], "cast": [8, 97], "observ": [8, 101, 103], "primarili": 8, "although": [8, 103], "idea": 8, "readili": 8, "more": [8, 9, 14, 16, 22, 33, 41, 47, 88, 92, 93, 94, 97, 98, 103], "than": [8, 16, 22, 25, 33, 41, 47, 85, 88, 97, 98, 103], "non": [8, 14, 16, 23, 28, 47, 89, 90, 102], "often": [8, 96, 101, 103], "recast": 8, "though": [8, 9, 11, 94, 98], "incur": 8, "overhead": 8, "mathemat": [8, 92, 97, 98], "strategi": [8, 14, 97, 103], "take": [8, 14, 22, 32, 38, 41, 93, 94, 95, 96, 97, 98, 100, 103], "hard": [8, 97, 98, 101], "map": [8, 16, 19, 47, 70, 88, 91, 93, 94, 98, 103], "onto": 8, "similar": [8, 9, 98], "version": [8, 9, 11, 13, 14, 44, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "usual": [8, 94], "easier": [8, 101], "core": [8, 95, 97], "here": [8, 9, 14, 22, 23, 28, 32, 38, 41, 94, 96, 97, 98, 101, 103], "give": [8, 9, 93, 101], "inform": [8, 9, 14, 17, 23, 24, 26, 28, 31, 35, 37, 39, 40, 41, 46, 48, 50, 53, 66, 67, 75, 94, 95, 97, 103], "about": [8, 9, 35, 53, 93, 94, 95, 97, 103], "one": [8, 9, 11, 14, 16, 22, 24, 27, 32, 33, 38, 41, 44, 47, 69, 70, 76, 94, 95, 96, 97, 98, 100, 103], "heurist": [8, 18, 96, 97, 98, 103], "find": [8, 9, 14, 22, 27, 32, 36, 41, 92, 94, 97, 98, 100, 103], "better": [8, 94, 99], "could": [8, 14, 97, 98, 101, 103], "someth": 8, "discret": 8, "solver": [8, 14, 32, 38, 44, 94, 98, 101], "onc": [8, 38, 47, 94, 97, 100, 101, 103], "extract": 8, "valu": [8, 14, 16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 31, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 59, 66, 67, 72, 78, 79, 80, 81, 82, 83, 86, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103], "": [8, 9, 14, 16, 19, 47, 55, 73, 74, 92, 94, 95, 96, 97, 98, 101, 102, 103], "admiss": 8, "concret": [8, 95], "see": [8, 9, 11, 14, 16, 23, 40, 88, 91, 93, 95, 97, 98, 102], "goeman": [8, 9, 24, 25], "williamson": [8, 9, 24, 25], "maxcut": [8, 97, 103], "without": [8, 14, 55, 57, 58, 60, 65, 66, 67, 68, 95, 102, 103], "loss": 8, "gener": [8, 14, 22, 25, 35, 39, 41, 43, 46, 47, 53, 63, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "rest": 8, "graph": [8, 9, 25, 55, 57, 58, 60, 63, 65, 66, 67, 68, 95, 97, 98, 100, 103], "g": [8, 14, 16, 32, 38, 63, 92, 93, 94, 95, 96, 97, 98, 102], "v": [8, 14, 94, 96, 97, 98], "our": [8, 93, 95, 97, 98, 101, 103], "goal": 8, "partit": [8, 58, 61, 97, 100, 103], "vertic": [8, 97, 103], "maxim": [8, 11, 14, 16, 41, 55, 59, 73, 74, 92, 93, 97, 99, 100, 101, 102, 103], "number": [8, 14, 16, 19, 22, 25, 26, 27, 33, 38, 40, 41, 44, 46, 47, 49, 51, 53, 54, 61, 63, 66, 67, 71, 72, 73, 74, 83, 93, 94, 97, 98, 99, 100, 102, 103], "edg": [8, 66, 97, 98, 100, 103], "connect": [8, 97, 98, 100], "each": [8, 19, 20, 26, 29, 30, 38, 41, 47, 51, 54, 67, 93, 94, 95, 96, 97, 98, 99, 100, 103], "v_i": 8, "assign": [8, 97, 103], "cut": [8, 25, 60, 93, 98, 100, 102, 103], "text": [8, 14, 16, 72, 92, 93], "m": [8, 14, 86, 92, 93, 95, 97, 98, 99, 101, 102], "sum_": [8, 14, 25, 63, 72, 97, 98], "ij": [8, 97, 98], "e_": 8, "frac": [8, 97], "m_j": 8, "do": [8, 9, 14, 35, 72, 93, 97, 98, 99, 101], "space": [8, 95, 97], "pauli": [8, 14, 16, 46, 53, 88, 94, 97, 103], "embed": 8, "feasibl": [8, 14, 16, 19, 22, 36, 96, 97, 98], "input": [8, 14, 16, 26, 47, 66, 67, 93, 94, 95, 103], "product": [8, 97, 102], "let": [8, 14, 92, 93, 98, 102, 103], "u": [8, 14, 93, 96, 97, 98, 100, 102, 103], "denot": [8, 16, 92, 94, 98], "f": [8, 92, 94, 98, 100, 101, 102, 103], "mapsto": 8, "mathcal": [8, 96], "d": [8, 95, 97, 98, 100, 101, 103], "mathbb": [8, 96, 98], "c": [8, 18, 92, 95, 96, 97, 98, 101, 102], "n": [8, 14, 19, 47, 63, 66, 67, 72, 92, 95, 96, 97, 98, 99, 100, 101, 103], "tr": 8, "big": [8, 14, 86, 98, 102], "h": [8, 14, 63, 97, 98], "cdot": 8, "where": [8, 9, 14, 19, 54, 63, 67, 72, 92, 93, 95, 97, 98, 103], "case": [8, 9, 14, 17, 23, 24, 26, 31, 35, 37, 38, 40, 44, 48, 69, 70, 71, 72, 73, 74, 76, 92, 93, 94, 95, 96, 97, 98, 99, 103], "geq": [8, 14, 72, 92, 93], "qquad": 8, "foral": [8, 96, 97, 98], "order": [8, 14, 16, 35, 66, 88, 91, 92, 94, 96, 97, 103], "guarante": [8, 14, 19, 22, 96, 97, 98], "true": [8, 11, 12, 16, 18, 19, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76, 88, 92, 94, 96, 97, 98, 101, 102, 103], "enforc": [8, 96, 98], "stronger": [8, 98], "condit": [8, 96, 97, 99], "word": [8, 103], "all": [8, 13, 14, 16, 19, 23, 24, 28, 29, 46, 67, 69, 84, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "rather": 8, "simpli": [8, 9, 13, 97], "upper": [8, 14, 16, 22, 33, 41, 80, 82, 92, 93], "bound": [8, 14, 16, 22, 33, 41, 46, 70, 80, 82, 85, 92, 93, 98, 101, 102, 103], "detail": [8, 9, 11, 12, 14, 16, 23, 46, 88, 91, 93, 94, 97, 102, 103], "becom": [8, 97, 101], "crucial": [8, 103], "further": [8, 14, 47, 99, 102], "down": [8, 95, 97, 103], "explicitli": [8, 103], "explic": 8, "full": [8, 96, 102], "base": [8, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 94, 96, 97, 98, 99, 103], "mai": [8, 9, 14, 23, 25, 28, 39, 40, 69, 70, 94, 98, 103], "help": [8, 19, 94], "first": [8, 9, 19, 22, 33, 37, 41, 92, 93, 94, 96, 97, 98, 100, 101, 102], "discuss": [8, 95, 96, 98], "familiar": 8, "languag": [8, 103], "rangl": [8, 95, 97, 98, 101], "otim": [8, 98], "quad": [8, 92, 96, 98], "z_i": [8, 97, 98], "z_j": [8, 97], "indic": [8, 14, 16, 47, 54, 55, 58, 59, 60, 65, 66, 68, 80, 82, 86, 92, 95, 97], "th": [8, 16, 88, 91], "ident": [8, 102], "It": [8, 11, 12, 14, 16, 32, 47, 55, 57, 58, 60, 65, 66, 67, 68, 94, 97, 101, 102, 103], "worth": [8, 97, 98, 103], "convinc": 8, "yourself": 8, "transform": [8, 98], "particular": [8, 14, 96, 98, 103], "sort": [8, 14, 25, 99, 101], "current": [8, 9, 17, 18, 24, 26, 31, 35, 37, 40, 48, 93, 95], "includ": [8, 14, 92, 93, 97, 103], "how": [8, 9, 14, 32, 38, 92, 93, 94, 97, 98, 99, 101], "exactli": [8, 93, 98, 100], "reproduc": 8, "form": [8, 16, 27, 32, 38, 44, 75, 76, 82, 83, 93, 94, 97, 98, 100, 103], "free": [8, 97, 102], "evalu": [8, 14, 22, 78, 79, 80, 81, 82, 83, 97, 98, 99, 103], "superposit": [8, 95], "stand": [8, 96], "analogi": 8, "might": [8, 16, 94, 103], "thei": [8, 11, 14, 72, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "practic": [8, 70, 96, 97, 103], "wai": [8, 9, 82, 92, 93, 97, 98, 101], "measur": [8, 46, 51, 95, 103], "basi": [8, 46, 51, 97, 98, 103], "project": [8, 9, 14, 23, 102], "ani": [8, 11, 14, 16, 17, 22, 23, 24, 26, 31, 33, 35, 37, 40, 41, 48, 72, 78, 79, 80, 81, 82, 83, 85, 88, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "consequ": [8, 103], "imag": 8, "were": [8, 14, 18, 25, 33, 34, 92, 93], "outlin": [8, 32, 38], "1983": 8, "stephen": 8, "wiesner": 8, "context": [8, 14, 46, 49, 53, 95, 97, 103], "commun": [8, 9, 14], "complex": [8, 50, 51, 97], "theori": [8, 55, 65], "conceiv": 8, "co": 8, "opt": 8, "reason": [8, 22], "introduct": 8, "rac": 8, "encourag": [8, 103], "reader": 8, "seek": 8, "out": [8, 9, 14, 16, 55, 57, 58, 60, 65, 66, 67, 68, 92], "k": [8, 96, 98, 103], "copi": [8, 11, 16, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "you": [8, 9, 11, 12, 13, 14, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "probabl": [8, 14, 26, 30, 31, 42, 47, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 94, 95, 97, 99, 101, 102, 103], "previou": [8, 11, 14, 95, 98, 100, 103], "trivial": [8, 14], "write": [8, 16, 28, 98, 102], "854": 8, "789": 8, "respect": [8, 14, 54, 92, 93, 94, 95, 96, 97, 102, 103], "note": [8, 11, 12, 16, 72, 86, 87, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103], "4": [8, 11, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103], "been": [8, 9, 11, 12, 14, 27, 47, 49, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "proven": 8, "imposs": 8, "As": [8, 9, 92, 93, 95, 96, 103], "abov": [8, 9, 93, 95, 96, 98, 101, 103], "decompos": 8, "hermitian": 8, "rho": [8, 14, 19, 20, 96], "left": [8, 16, 78, 79, 81, 93, 97], "ax": [8, 97], "bY": 8, "cz": [8, 97], "right": [8, 16, 78, 79, 81, 92, 93, 99], "b": [8, 19, 92, 93, 96, 97, 98, 102], "associ": [8, 14, 93, 98, 103], "now": [8, 14, 93, 96, 101], "written": [8, 16, 93, 98], "arrai": [8, 14, 25, 55, 57, 58, 60, 62, 65, 66, 67, 68, 72, 80, 82, 92, 93, 94, 98, 99, 101, 102, 103], "l": [8, 16, 96, 98], "ll": [8, 103], "vert": 8, "psi": [8, 97, 98], "langl": [8, 97, 98], "hline": 8, "_m": 8, "m_0": 8, "sqrt": [8, 14, 63, 101], "m_1": 8, "m_2": 8, "end": [8, 14, 16, 29, 36, 72, 92, 94, 95, 101, 102], "tabl": [8, 11, 12], "string": [8, 14, 16, 17, 22, 23, 24, 26, 28, 31, 35, 37, 39, 40, 41, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 92], "scale": [8, 32, 38, 71, 72, 76, 92, 98, 99], "natur": [8, 97, 98, 103], "composit": 8, "tensor": 8, "m_3": 8, "m_4": 8, "m_5": 8, "similarli": [8, 98], "nmid": 8, "pad": 8, "bitstr": [8, 14], "expect": [8, 14, 26, 46, 50, 51, 53, 84, 93, 97, 98, 99, 103], "correspond": [8, 11, 12, 16, 17, 24, 26, 31, 32, 35, 37, 38, 40, 43, 44, 47, 48, 50, 51, 55, 56, 59, 60, 64, 65, 66, 68, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 103], "factor": [8, 14, 19, 27, 32, 38, 44, 49, 71, 72, 76, 92, 93, 99, 103], "depend": [8, 9, 23, 28, 39, 93, 97, 98, 101, 102, 103], "densiti": 8, "recoveri": [8, 47, 103], "substitut": [8, 16, 37, 38], "decis": [8, 19, 47, 49, 96, 97, 98, 103], "uniqu": [8, 25], "under": [8, 9, 11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "p_": 8, "j": [8, 14, 19, 25, 44, 63, 72, 94, 96, 97, 98, 99, 100, 101, 103], "after": [8, 38, 47, 51, 93, 95, 97, 102], "bracket": 8, "index": [8, 9, 16, 35, 67, 80, 82, 92, 98], "make": [8, 16, 47, 55, 92, 97, 98, 103], "clear": [8, 16, 103], "necessarili": 8, "act": 8, "becaus": [8, 11, 12, 14, 93, 96, 103], "longer": [8, 14, 47, 101], "relationship": 8, "mean": [8, 9, 14, 16, 63, 93, 94, 95, 97, 103], "subset": [8, 56, 61, 64, 93, 97, 100, 103], "same": [8, 9, 14, 16, 47, 88, 91, 92, 93, 94, 96, 98, 100, 101, 102], "pose": 8, "try": [8, 11, 22, 23, 27, 28, 32, 33, 34, 38, 39, 41, 44, 92, 94, 97, 98, 100, 103], "ensur": [8, 14, 47, 93, 97, 101], "earlier": [8, 95, 103], "x_i": [8, 14, 63, 72, 92, 93, 97, 101], "x_j": [8, 14, 72, 97], "If": [8, 9, 13, 14, 16, 18, 19, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 46, 47, 49, 53, 66, 69, 71, 72, 76, 86, 88, 91, 92, 94, 96, 98, 100, 102, 103], "behav": [8, 14], "howev": [8, 46, 93, 97, 101, 103], "compos": 8, "recal": 8, "group": [8, 14, 58], "self": [8, 15, 98], "invers": 8, "thu": [8, 25, 92, 93, 94, 99], "deduc": 8, "anoth": [8, 75, 92, 94], "element": [8, 16, 37, 47, 86, 87, 89, 90, 95], "restor": 8, "introduc": [8, 11, 14, 18, 38, 69, 92, 93, 94, 96, 99, 100], "specif": [8, 9, 26, 40, 92, 95, 96, 97, 98], "share": [8, 103], "dot": [8, 92, 98], "accomplish": [8, 47], "color": [8, 55, 57, 58, 60, 65, 66, 67, 68, 95, 97, 98], "final": [8, 22, 40, 41, 93, 94, 96, 97, 98, 99, 103], "rho_": 8, "unlik": [8, 103], "so": [8, 14, 49, 92, 93, 97, 98, 100, 103], "propos": [8, 70, 93, 96, 97], "describ": [8, 22, 27, 32, 38, 39, 40, 41, 44, 46, 49, 76, 95, 97], "wa": [8, 14, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "arbitrari": 8, "close": [8, 28, 97, 98, 103], "would": [8, 93, 97, 98, 99, 103], "handl": [8, 11, 12, 14, 93, 96], "sign": [8, 93], "lead": 8, "rl": 8, "sim": [8, 98], "either": [8, 37, 44, 46, 53, 80, 82, 92, 103], "notic": [8, 11, 63, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "faithfulli": 8, "failur": [8, 17, 24, 26, 31, 35, 36, 37, 40, 48, 69, 70, 71, 72, 73, 74, 94], "decreas": [8, 95], "exponenti": [8, 97, 101], "shot": [8, 11, 12, 46, 51, 99, 103], "three": [8, 92, 93, 95], "One": [8, 97, 103], "per": [8, 26, 47, 49, 103], "taken": [8, 16, 93, 94, 97], "independ": [8, 14, 63, 65, 95], "distinguish": 8, "randomli": [8, 98], "select": [8, 19, 69, 96, 98, 100, 103], "perfectli": 8, "pair": [8, 92, 98], "orthogon": 8, "bar": 8, "everi": [8, 38, 71, 72, 76, 95, 97, 98, 103], "flip": [8, 73, 74], "sampl": [8, 11, 14, 17, 21, 24, 26, 27, 30, 31, 35, 37, 40, 42, 46, 48, 51, 97, 98, 101, 102, 103], "rightarrow": [8, 14, 72, 95, 97], "choos": [8, 46, 69, 96, 97, 98, 103], "essenti": [8, 93, 103], "equival": [8, 93, 94, 95, 97], "pick": 8, "correct": [8, 44, 93, 98], "put": [8, 95, 97, 98], "unknown": [8, 97], "far": 8, "like": [8, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 93], "low": [8, 66, 67], "odd": 8, "fortun": 8, "doe": [8, 11, 14, 16, 19, 32, 49, 71, 83, 94, 95, 97, 103], "lower": [8, 14, 16, 22, 33, 41, 80, 82, 85, 92, 93, 99], "ratio": [8, 47, 103], "certain": [8, 93, 95, 96], "highest": [8, 95, 103], "energi": [8, 14, 97], "eigenst": [8, 32, 97, 99], "t": [8, 9, 14, 16, 44, 92, 96, 97, 98, 99, 101], "leq": [8, 14, 72, 92, 93, 96, 98], "fval": [8, 11, 14, 17, 24, 26, 31, 35, 37, 40, 42, 48, 93, 94, 96, 99, 101, 102, 103], "5": [8, 12, 43, 44, 70, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103], "9": [8, 9, 11, 14, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103], "2021": 8, "conjug": 8, "sigact": 8, "vol": 8, "15": [8, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "issu": [8, 14, 16, 18, 25, 33, 34, 88, 91, 103], "pp": 8, "78": [8, 93, 100], "88": 8, "link": [8, 98, 102], "masahito": 8, "hayashi": 8, "exist": [8, 11, 12, 14, 16, 71, 72, 91, 93, 97, 101], "enough": [8, 97, 98, 101], "four": 8, "journal": 8, "physic": [8, 94, 97], "8": [8, 14, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "129": 8, "2006": [8, 98], "its": [9, 14, 16, 19, 40, 66, 80, 82, 94, 97, 98], "own": [9, 44, 103], "environ": 9, "platform": 9, "should": [9, 14, 19, 29, 33, 35, 43, 44, 89, 90, 94, 95, 97, 103], "refer": [9, 16, 18, 22, 38, 39, 41, 44, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 72, 80, 82, 93, 97, 103], "Then": [9, 94, 95, 96], "focus": [9, 99], "made": [9, 97, 98], "default": [9, 14, 16, 19, 27, 32, 38, 41, 44, 46, 47, 49, 54, 55, 88, 92, 93, 97, 98, 103], "those": [9, 93], "ibm": [9, 11, 14, 23, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103], "cplex": [9, 14, 16, 23, 92, 94, 96, 102], "cvxpy": 9, "matplotlib": [9, 96, 97, 98, 99, 100], "simplest": [9, 98], "guid": [9, 10, 14], "your": [9, 11, 12, 14, 92, 100], "virtual": 9, "add": [9, 14, 16, 92, 93, 94, 98], "extra": [9, 14], "list": [9, 16, 17, 21, 24, 25, 26, 27, 30, 31, 32, 35, 37, 38, 40, 43, 44, 47, 48, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 92, 93, 94, 97, 98], "manner": 9, "visual": [9, 94, 95, 96, 97, 98], "pip": [9, 14, 98, 102], "alreadi": [9, 14, 16, 43, 49, 103], "sourc": [9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "most": [9, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 95, 98], "recent": [9, 97], "updat": [9, 14, 16, 19, 20, 95, 96, 102], "packag": [9, 96, 97, 98, 100], "pypi": [9, 23, 102], "repositori": 9, "abil": 9, "inspect": 9, "latest": 9, "sinc": [9, 16, 23, 28, 46, 88, 93, 95, 97, 103], "chang": [9, 14, 22, 43, 44, 95, 101], "instruct": [9, 13], "clone": 9, "git": 9, "http": [9, 11, 14, 16, 22, 23, 39, 41, 46, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "github": [9, 14, 16, 88, 91, 92, 103], "com": [9, 14, 16, 23, 88, 91], "creat": [9, 16, 27, 32, 38, 43, 44, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 80, 82, 85, 88, 94, 95, 96, 97, 99, 101, 103], "folder": 9, "call": [9, 14, 38, 47, 49, 92, 93, 94, 97, 103], "cd": 9, "want": [9, 14, 94, 100, 102, 103], "lint": 9, "check": [9, 14, 18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76, 98, 103], "r": [9, 94, 95, 96, 97, 98, 99, 102], "dev": 9, "txt": [9, 11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "edit": 9, "mode": [9, 40, 69], "don": 9, "reinstal": 9, "read": [9, 11, 12, 14, 60, 66, 102], "lp": [9, 16, 102], "file": [9, 11, 14, 16, 60, 66, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "usag": [9, 63], "cplexoptim": [9, 14, 35, 93, 96, 101, 102], "wrapper": [9, 22, 23, 28, 32, 39, 41, 93], "command": 9, "effect": [9, 18], "cvx": 9, "goemanswilliamsonoptim": [9, 14], "draw": [9, 55, 57, 58, 60, 65, 66, 67, 68, 100, 101, 103], "gurobipi": [9, 14, 28, 87, 90], "gurobi": [9, 14, 28, 102], "gurobioptim": [9, 14, 102], "dive": 9, "tutori": [9, 10, 11, 12, 14, 72, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "open": [10, 14, 16, 102], "framework": [10, 95], "get": [10, 14, 16, 17, 24, 26, 31, 35, 37, 40, 48, 54, 60, 92, 94, 97, 98, 102], "start": [10, 19, 22, 33, 41, 43, 44, 92, 93, 94, 97, 103], "migrat": [10, 14], "terra": [11, 12, 14, 16, 88, 91, 94], "22": [11, 14, 93, 94, 97, 101, 102], "implement": [11, 18, 19, 20, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 43, 44, 49, 76, 94, 95, 96, 97], "sampler": [11, 12, 14, 27, 46, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "opflow": [11, 14], "deprec": [11, 12, 13], "futur": [11, 14, 97], "releas": 11, "until": [11, 38, 95, 96, 97, 98, 103], "intent": [11, 12], "explan": [11, 12, 103], "suggest": [11, 12, 97], "basesampl": [11, 14, 27, 46], "backendsampl": 11, "aersampl": 11, "aer": [11, 103], "runtim": [11, 14, 103], "minimum_eigen_solv": 11, "minimum_eigensolv": [11, 12, 14, 103], "minimumeigensolv": [11, 12, 14, 48, 49, 94, 96, 99], "samplingminimumeigensolv": [11, 12, 14, 31, 32, 94], "basic": [11, 12, 87, 93, 94, 98], "But": [11, 12, 94], "except": [11, 12, 15, 23, 27, 28, 39, 92, 93, 94, 98, 100], "inherit": [11, 44, 94], "extens": [11, 12, 97], "eigen": [11, 12, 31, 32, 37, 38, 93, 96, 97, 100, 103], "setup": [11, 92, 99], "qiskit_optim": [11, 12, 14, 22, 23, 28, 32, 35, 38, 41, 69, 70, 76, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "print": [11, 12, 14, 16, 17, 23, 24, 26, 28, 31, 35, 37, 39, 40, 41, 48, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "prettyprint": [11, 14, 16, 17, 24, 26, 31, 35, 37, 40, 48, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103], "name": [11, 14, 16, 17, 24, 26, 31, 35, 37, 40, 41, 48, 60, 66, 70, 78, 79, 80, 81, 82, 85, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103], "subject": [11, 14, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103], "No": [11, 29, 92, 93, 94, 95, 97, 100, 101, 103], "previous": [11, 12, 13, 14, 103], "me": [11, 12], "meo": [11, 12, 100, 102], "statu": [11, 14, 16, 17, 24, 26, 31, 35, 36, 37, 40, 41, 42, 48, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103], "success": [11, 14, 36, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103], "basica": 11, "quantuminst": [11, 14], "backend": [11, 14, 46, 96, 103], "get_backend": [11, 14], "qasm_simul": [11, 14], "1000": [11, 12, 19, 22, 96, 97, 103], "qin": 11, "quantum_inst": [11, 14], "occur": [11, 97], "due": [11, 16, 23, 27, 28, 38, 39, 92, 93, 97, 98], "cell": [11, 92, 98], "typeerror": [11, 27, 32, 38, 49, 84], "ex": 11, "slsqpoptim": [11, 12, 18], "pre_solv": [11, 12, 44, 101], "relax_for_pre_solv": [11, 12, 44, 101], "epsilon": [11, 12, 43, 44, 101], "25": [11, 12, 44, 94, 98, 99, 102], "specifi": [11, 16, 18, 22, 23, 27, 28, 32, 33, 35, 38, 41, 44, 47, 51, 55, 57, 58, 60, 65, 66, 67, 68, 69, 79, 81, 92, 97, 100, 103], "num_value_qubit": [11, 12, 27], "num_iter": [11, 12, 27, 95], "valueerror": [11, 27, 33, 46, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "pass": [11, 14, 22, 28, 41, 44, 71, 72, 76, 93, 101, 103], "jupyt": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "qiskit_version_t": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "qiskit_copyright": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "informationqiskit": 11, "softwareversionqiskit": 11, "terra0": 11, "23": [11, 101], "0qiskit": 11, "aer0": 11, "11": [11, 14, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "1qiskit": 11, "optimization0": 11, "machin": [11, 19, 96], "learning0": 11, "0system": [11, 92, 93, 95, 98, 100], "informationpython": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "version3": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "15python": 11, "compilerclang": 11, "14": [11, 22, 92, 93, 94, 97, 98, 99, 100, 101, 103], "clang": 11, "1400": 11, "29": 11, "102": 11, "buildmain": 11, "oct": 11, "2022": [11, 102], "27": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "25osdarwincpus4memori": 11, "gb": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "16": [11, 92, 93, 94, 97, 98, 100, 101, 103], "0tue": 11, "dec": 11, "06": [11, 41], "08": [11, 53, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "13": [11, 41, 92, 93, 94, 96, 97, 98, 100, 101, 103], "jst": 11, "part": [11, 14, 16, 81, 83, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "copyright": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "2017": [11, 70, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "licens": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "apach": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "mayobtain": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "root": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "directori": [11, 16, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "tree": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "www": [11, 23, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "org": [11, 14, 22, 23, 39, 41, 46, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "modif": [11, 47, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "deriv": [11, 86, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "work": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "retain": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "thiscopyright": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "modifi": [11, 19, 43, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "carri": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "indicatingthat": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "alter": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "supersed": [12, 14], "standalon": 12, "replac": [12, 16, 22, 33, 37, 41, 92, 93, 94], "former": [12, 14], "switch": [13, 14], "over": [13, 63, 97, 99, 103], "remov": [13, 14, 16, 93, 102], "organ": 14, "emphas": 14, "driven": 14, "To": [14, 69, 92, 93, 96, 97, 101, 102, 103], "reflect": 14, "board": 14, "owner": 14, "maintain": [14, 35], "decid": 14, "regardless": 14, "time": [14, 16, 19, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103], "member": 14, "team": 14, "bulk": 14, "legaci": 14, "thing": 14, "noth": 14, "reli": [14, 103], "otherwis": [14, 16, 18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 69, 72, 73, 74, 76, 88, 99], "immedi": 14, "pin": 14, "sure": [14, 16, 47, 98, 103], "blog": 14, "post": 14, "drop": 14, "scipymilpoptim": 14, "scipi": [14, 22, 39, 40, 41], "milp": [14, 39, 98], "mix": [14, 18, 96, 98], "ad": [14, 16, 32, 71, 72, 76, 93, 97, 98, 101], "encod": [14, 25, 45, 47, 48, 49, 50, 70, 92, 93, 95, 98, 102], "qrao": [14, 103], "7": [14, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103], "repres": [14, 16, 17, 24, 26, 31, 32, 35, 37, 40, 43, 48, 51, 54, 55, 57, 58, 60, 65, 66, 67, 68, 93, 94, 95, 97, 101, 103], "Ising": [14, 16, 32, 88, 91, 93, 94, 99, 103], "quantum_info": [14, 93], "sparsepauliop": [14, 91, 93, 97, 100, 103], "vqeclient": 14, "qaoaclient": 14, "vqeruntimeresult": 14, "session": 14, "to_is": [14, 16, 94, 97, 99, 100], "oper": [14, 16, 26, 41, 47, 49, 88, 91, 94, 95, 96, 97, 98, 101, 103], "from_is": [14, 16, 94], "accept": [14, 23, 28, 93], "minimumeigenoptim": [14, 18, 37, 38, 44, 95, 96, 97, 98, 99, 100, 101, 102, 103], "numpyminimumeigensolv": [14, 18, 31, 32, 38, 94, 95, 96, 97, 99, 100, 101], "argument": [14, 22, 41, 96, 103], "warmstartqaoaoptim": [14, 101], "incorrect": 14, "vary_rho": [14, 19], "update_rho_by_residu": [14, 19], "admmoptim": [14, 17, 96], "popul": [14, 96], "y_save": 14, "admmstat": [14, 17], "inequalitytoequ": 14, "convert": [14, 16, 27, 32, 35, 38, 44, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 86, 95, 97, 99, 100, 101, 102, 103], "slack": [14, 69, 72, 93], "caus": [14, 103], "turn": [14, 98], "along": [14, 16], "pend": 14, "subsequ": 14, "samplingvq": [14, 94, 96, 97, 98], "keyword": 14, "calcul": [14, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 76, 93, 103], "accordingli": [14, 16, 99], "vqeprogram": 14, "qaoaprogram": 14, "parse_tsplib_format": [14, 66], "did": [14, 46, 93], "pars": 14, "tsplib": [14, 66], "correctli": [14, 16, 93, 95], "whitespac": 14, "eof": 14, "present": [14, 16, 96, 98], "pretti": [14, 16, 17, 24, 26, 31, 35, 37, 40, 48, 102], "qp": [14, 93, 94, 95, 96, 97, 99, 100, 101, 102], "integer_var": [14, 16, 70, 92, 93, 102], "continuous_var": [14, 16, 41, 92, 96], "binary_var_list": [14, 16, 99], "10": [14, 19, 70, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "integer_var_list": [14, 16], "continuous_var_list": [14, 16], "constant": [14, 16, 47, 77, 83, 88, 91, 92, 94, 98], "linear_constraint": [14, 16, 92, 93, 98, 102], "lin_g": 14, "lin_eq": [14, 92], "quadratic_constraint": [14, 16, 92], "quad_l": 14, "output": [14, 16, 22, 23, 26, 28, 39, 41, 82, 93, 97, 101, 103], "x5": [14, 101], "x6": 14, "q1": 14, "x15": 14, "x16": 14, "x17": 14, "x18": 14, "x19": 14, "x20": 14, "12": [14, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103], "x7": 14, "x8": 14, "x9": 14, "x10": 14, "x11": 14, "x12": 14, "x13": 14, "x14": 14, "format": [14, 16, 55, 57, 58, 60, 62, 65, 66, 67, 68, 76, 92, 93, 94, 99, 102], "str": [14, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 46, 48, 49, 51, 60, 66, 69, 76, 78, 79, 80, 81, 82, 83, 85, 97, 98, 101], "repr": 14, "id": 14, "friendli": 14, "line": [14, 96], "linearconstraint": [14, 16], "linearexpress": 14, "quadraticconstraint": [14, 16], "quadraticexpress": 14, "quadraticobject": 14, "displai": [14, 23, 28, 39, 92, 95, 96, 102], "multi": [14, 18, 22, 33, 41, 96], "empti": [14, 16, 18, 23, 25, 28, 33, 34, 39, 92], "x0": [14, 16, 94, 95, 101], "x1": [14, 35, 94, 95, 101], "x2": [14, 35, 94, 95, 101], "At": [14, 95, 98], "didn": 14, "fail": 14, "insid": [14, 98], "mp": [14, 86, 89, 92, 93, 95, 96, 99, 101, 102], "pleas": [14, 93, 98], "optimizationresultstatu": [14, 17, 24, 26, 31, 35, 37, 40, 42, 48, 94, 102, 103], "q0": [14, 16, 92], "basebackend": 14, "18": [14, 93, 94, 97, 101, 103], "instal": [14, 16, 23, 28, 96, 98, 100, 102], "wrong": 14, "show": [14, 92, 93, 94, 95, 96, 97, 98, 99, 101], "warn": [14, 98], "messag": [14, 15, 18, 22, 25, 27, 32, 33, 34, 38, 40, 41, 44, 49, 76, 102], "printabl": [14, 16], "alwai": [14, 96, 100, 103], "reword": 14, "bin": [14, 54, 97], "pack": [14, 54, 64, 98, 100], "binpack": 14, "en": [14, 23, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68], "wikipedia": [14, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68], "wiki": [14, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68], "bin_packing_problem": [14, 54], "client": [14, 98], "execut": 14, "dedic": 14, "transpil": 14, "swap": 14, "puls": 14, "cross": [14, 97], "reson": 14, "hardwar": [14, 46, 97, 103], "significantli": [14, 103], "reduc": [14, 94], "depth": [14, 94, 97, 98], "improv": [14, 27], "cvar": 14, "ibmq": 14, "load_account": 14, "get_provid": 14, "hub": 14, "q": [14, 82, 92, 95, 96, 98, 99], "main": 14, "ibmq_qasm_simul": 14, "diagon": [14, 101, 103], "eigenvalu": [14, 97, 103], "op": [14, 20, 94, 100], "up": [14, 82, 95, 97], "rep": [14, 97, 99, 100], "p": [14, 47, 72, 96, 97, 99, 103], "repetit": 14, "alpha": [14, 97, 99], "75": [14, 94, 97], "best": [14, 94, 95, 97, 98, 99, 102, 103], "readout": 14, "compute_minimum_eigenvalu": [14, 97], "doc": [14, 22, 23, 39, 41, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "12_qaoa_runtim": 14, "ipynb": [14, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "translat": [14, 32, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 99, 101], "from_docplex_mp": [14, 92, 95, 96, 99, 101, 102], "logic": [14, 32, 44, 86, 103], "express": [14, 79, 80, 81, 82, 86, 92], "logical_and": [14, 86], "logical_or": [14, 86], "logical_not": [14, 86], "mod": [14, 92], "add_constraint": [14, 92, 96, 99, 101, 102], "sherrington": [14, 63], "kirkpatrick": [14, 63], "sk": [14, 63], "skmodel": 14, "ferromagnet": 14, "antiferromagnet": 14, "interact": [14, 97, 98], "disord": [14, 63], "field": [14, 96, 97], "spin": [14, 63, 94], "glass": 14, "configur": [14, 46, 63, 103], "site": [14, 63], "w_": [14, 63, 97, 98], "x_ix_j": [14, 63], "chosen": [14, 63, 97, 98], "uniformli": [14, 22, 33, 41, 46, 63], "dmitri": [14, 63], "panchenko": [14, 63], "overview": [14, 63, 93], "ab": [14, 46, 53, 63, 98], "1211": [14, 63], "1094": [14, 63], "from_docplex": 14, "to_docplex": 14, "These": [14, 93, 98, 103], "to_docplex_mp": [14, 93, 102], "renam": 14, "avoid": 14, "confus": 14, "fact": 14, "cloud": 14, "vqeprogramresult": 14, "integertobinari": 14, "zero": [14, 16, 22, 33, 41, 53, 97, 98, 99], "ind": [14, 99], "sens": [14, 16, 69, 73, 74, 78, 79, 81, 83, 92, 93, 98], "_le": 14, "_ge": 14, "linear_ct": 14, "coeffici": [14, 16, 70, 79, 80, 81, 82, 83, 88, 92, 93, 97], "properli": [14, 96], "userwarn": 14, "dictionari": [14, 16, 17, 24, 26, 31, 35, 37, 40, 48, 80, 82, 92, 99], "formul": [14, 72, 86, 92, 93, 94, 97, 102], "from_gurobipi": [14, 102], "to_gurobipi": [14, 102], "minimizetomaxim": [14, 93], "linearinequalitytopenalti": [14, 93], "penalti": [14, 27, 32, 38, 44, 49, 71, 72, 76, 93, 94, 97, 98, 99, 101], "maximizetominim": [14, 93], "quadraticprogramtoqubo": [14, 27, 32, 38, 44, 49, 93, 97, 100, 101], "intern": [14, 17, 20, 27, 32, 38, 44, 80, 82, 99, 101, 103], "fallback": 14, "found": [14, 17, 18, 19, 24, 25, 26, 31, 33, 34, 35, 37, 40, 48, 95, 96, 97, 98, 102, 103], "cplex_paramet": [14, 23, 102], "paramet": [14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 98, 101, 102, 103], "limit": [14, 97, 98, 102], "thread": [14, 102], "pprint_as_str": 14, "aqua": 14, "octob": 14, "2020": [14, 18, 96, 99], "minimumeigenoptimizationresult": [14, 21, 30, 32, 37, 44], "raw_sampl": [14, 26, 31], "bit": [14, 103], "pull": 14, "97": 14, "evaluate_gradi": [14, 80, 82, 83], "qiskitoptimizationerror": [14, 16, 18, 22, 23, 27, 28, 32, 33, 34, 35, 38, 39, 41, 43, 44, 46, 47, 53, 66, 69, 70, 71, 72, 73, 74, 76, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94], "rotation_count": 14, "algorithm_glob": [14, 94, 97, 98, 99, 100, 101], "get_count": 14, "qc": 14, "determinist": [14, 53, 103], "count": [14, 16, 26, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 98, 103], "probabilist": 14, "with_traceback": 15, "tb": 15, "__traceback__": 15, "attribut": [16, 17, 18, 22, 23, 24, 26, 28, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 55, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 76, 78, 79, 80, 81, 82, 83, 84, 85, 94, 96, 103], "linear_constraints_index": 16, "quadratic_constraints_index": 16, "infeas": [16, 36, 38, 92, 94], "variables_index": 16, "none": [16, 17, 18, 22, 23, 24, 26, 27, 28, 31, 32, 35, 37, 38, 40, 44, 46, 48, 49, 50, 51, 53, 54, 55, 57, 58, 60, 63, 65, 66, 67, 68, 71, 72, 76, 83, 86, 98, 103], "occupi": 16, "binary_var_dict": 16, "kei": [16, 37, 80, 82, 92, 98, 101], "key_format": 16, "var_dict": 16, "construct": [16, 26, 33, 37, 40, 43, 47, 72, 81, 83, 94, 95, 96, 97, 103], "int": [16, 19, 22, 25, 26, 27, 33, 37, 38, 40, 41, 44, 46, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 78, 79, 80, 81, 82, 83, 85, 93, 94, 97, 98, 101, 102], "sequenc": 16, "less": [16, 25], "attempt": [16, 46, 94], "nest": 16, "dict": [16, 23, 26, 37, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 78, 79, 80, 81, 82, 83, 92], "var_list": 16, "delet": 16, "lowerbound": [16, 22, 33, 41, 70, 85, 92, 93, 102], "upperbound": [16, 22, 33, 41, 70, 85, 92, 93, 102], "1e": [16, 41, 53, 77, 85], "20": [16, 23, 77, 85, 93, 94, 96, 97, 98, 101, 103], "float": [16, 17, 19, 20, 22, 24, 25, 26, 27, 31, 32, 33, 35, 37, 38, 40, 41, 42, 43, 44, 48, 49, 53, 66, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 85, 86, 88, 91, 94, 99], "continuous_var_dict": 16, "export_as_lp_str": [16, 92, 102], "qubit_op": [16, 47, 88, 91, 103], "offset": [16, 47, 83, 88, 91, 92, 94, 95, 97, 98, 99, 100, 103], "fals": [16, 18, 19, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76, 80, 82, 88, 96], "shift": [16, 88, 94, 95], "1148": [16, 88, 91], "baseoper": [16, 88], "bool": [16, 18, 19, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76, 80, 82, 88, 102], "treat": [16, 88], "els": [16, 23, 28, 97, 98, 99], "notimplementederror": 16, "listop": 16, "get_feasibility_info": 16, "whether": [16, 18, 22, 23, 25, 27, 28, 29, 32, 33, 34, 38, 39, 41, 44, 47, 49, 53, 76, 80, 82, 92, 93], "violat": [16, 22, 103], "param": [16, 18, 66, 96, 99], "len": [16, 97, 98, 101, 103], "total": [16, 61, 66, 97, 100, 101, 102, 103], "var": [16, 35, 70, 94, 102], "get_linear_constraint": [16, 92], "indexerror": 16, "size": [16, 22, 35, 55, 94, 95, 98, 100], "keyerror": 16, "get_num_binary_var": 16, "get_num_continuous_var": 16, "get_num_integer_var": 16, "get_num_linear_constraint": 16, "get_num_quadratic_constraint": 16, "get_num_var": 16, "vartyp": [16, 85, 101], "filter": [16, 94], "get_quadratic_constraint": [16, 92], "get_vari": 16, "integer_var_dict": 16, "is_feas": [16, 97], "ndarrai": [16, 17, 22, 24, 25, 26, 31, 33, 35, 37, 40, 41, 42, 43, 48, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83], "rh": [16, 78, 79, 81, 92, 93, 98], "spmatrix": [16, 79, 80, 81, 82, 83], "side": [16, 78, 79, 81, 92, 93], "constraintsens": [16, 78, 79, 81, 92], "eq": [16, 70, 92, 93], "ge": [16, 92, 93], "greater": [16, 85, 97, 103], "le": [16, 92, 93], "c0": [16, 92, 97, 100, 101, 102], "tupl": [16, 22, 33, 37, 41, 49, 81, 82, 83, 85, 91, 94, 97], "wrap": [16, 22, 23, 28, 39, 41, 94, 96], "80": 16, "width": 16, "disabl": 16, "exce": 16, "long": [16, 96], "won": 16, "read_from_lp_fil": 16, "filenam": [16, 60, 66], "load": [16, 86, 87, 96, 98, 102], "filenotfounderror": 16, "pythonpath": 16, "remove_linear_constraint": [16, 92], "remove_quadratic_constraint": [16, 92], "substitute_vari": [16, 92], "weight": [16, 32, 37, 46, 54, 59, 66, 98, 100, 103], "everyth": 16, "match": [16, 35, 72, 83, 103], "invalid": [16, 27, 32, 38], "write_to_lp_fil": 16, "my_problem": 16, "append": [16, 94, 98, 99, 101], "suffix": [16, 102], "oserror": 16, "docplexexcept": 16, "admm": [17, 18, 19, 20], "termin": [17, 24, 26, 31, 35, 36, 37, 40, 48, 95, 96], "raw_result": [17, 24, 26, 31, 35, 37, 40, 48], "dump": [17, 24, 26, 31, 35, 37, 40, 48], "leftov": [17, 24, 26, 31, 35, 37, 40, 48], "variable_nam": [17, 24, 26, 31, 35, 37, 40, 48], "variables_dict": [17, 24, 26, 31, 35, 37, 40, 48], "get_correl": [17, 24, 26, 31, 35, 37, 40, 48], "zi": [17, 24, 26, 31, 35, 37, 40, 48], "zj": [17, 24, 26, 31, 35, 37, 40, 48], "correl": [17, 24, 26, 31, 35, 37, 40, 48], "matrix": [17, 24, 25, 26, 31, 35, 37, 40, 48, 60, 66, 80, 82, 92, 96, 97, 99, 101], "qubo_optim": [18, 96], "continuous_optim": [18, 96], "optimizationalgorithm": [18, 22, 23, 25, 27, 28, 32, 33, 38, 39, 41, 44, 49], "gambella": [18, 96], "simonetto": [18, 96], "block": [18, 19, 96], "preprint": [18, 94, 95, 96], "2001": [18, 96], "02069": [18, 96], "initi": [18, 19, 20, 22, 23, 28, 32, 33, 38, 39, 41, 43, 44, 78, 84, 94, 95, 97, 99, 101], "admmparamet": [18, 96], "get_compatibility_msg": [18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76], "incompat": [18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76], "is_compat": [18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76], "tri": [18, 22, 23, 27, 28, 32, 33, 34, 38, 39, 41, 44, 97], "admmoptimizationresult": 18, "rho_initi": [19, 20, 96], "10000": [19, 103], "factor_c": [19, 96], "100000": 19, "beta": [19, 96, 101], "maxit": [19, 96, 97, 99, 102], "tol": [19, 96], "0001": [19, 22], "max_tim": 19, "inf": 19, "three_block": [19, 96], "tau_incr": 19, "tau_decr": 19, "mu_r": 19, "mu_merit": 19, "warm_start": 19, "penal": [19, 96], "maximum": [19, 22, 41, 47, 49, 54, 59, 60, 66, 67, 95, 100, 103], "iter": [19, 26, 27, 29, 37, 38, 40, 41, 95, 96, 99, 103], "toler": [19, 22, 53, 96], "residu": [19, 96], "converg": [19, 96, 97, 103], "second": [19, 37, 93, 98], "boolean": 19, "flag": [19, 95], "rule": 19, "increas": [19, 94, 103], "accord": [19, 25, 43, 44, 94], "primal": [19, 96], "dual": [19, 96], "boyd": [19, 96], "parikh": [19, 96], "chu": [19, 96], "peleato": [19, 96], "eckstein": [19, 96], "2011": [19, 96], "distribut": [19, 63, 95, 96, 97, 98, 101, 103], "statist": [19, 94, 96, 97], "learn": [19, 96], "altern": [19, 96, 98], "direct": [19, 96], "multipli": [19, 92, 95, 96, 101], "foundat": [19, 96], "trend": [19, 96], "122": [19, 96], "merit": 19, "pre": [19, 44, 98], "option": [19, 32, 44, 69, 103], "even": [19, 93, 96, 97, 98], "tune": 19, "hint": 19, "keep": [20, 75, 98], "track": 20, "variou": [20, 100], "store": [20, 22, 29, 38, 41, 80, 82, 92, 99], "dure": [20, 32, 98], "recreat": 20, "third": [20, 98], "abc": [21, 33, 34, 52, 62, 75], "abstract": [21, 33, 34, 52, 57, 62, 75, 78, 97], "aggreg": [21, 30, 44, 93, 94, 99], "combin": [21, 30, 97, 98, 100, 103], "solutionsampl": [21, 24, 26, 30, 31, 35, 48, 51, 94, 102, 103], "rhobeg": 22, "rhoend": 22, "maxfun": 22, "disp": [22, 23, 28, 39, 102], "catol": 22, "0002": 22, "trial": [22, 33, 41, 97, 98], "clip": [22, 33, 41], "100": [22, 33, 41, 66, 67, 96, 98, 99, 102], "multistartoptim": [22, 41], "fmin_cobyla": 22, "html": [22, 39, 41, 92], "constructor": [22, 41, 85, 96], "later": [22, 41, 96], "invok": [22, 37, 41, 92, 96, 103], "optimum": [22, 41, 95, 97, 99], "consist": [22, 26, 32, 41, 81, 85, 101], "accuraci": [22, 41], "precis": [22, 92], "trust": 22, "region": 22, "control": [22, 97, 98, 101, 103], "frequenc": 22, "impli": [22, 93], "absolut": [22, 53], "guess": [22, 33, 41], "drawn": [22, 33, 41, 97], "unbound": [22, 33, 41, 80, 82], "correspondingli": [22, 33, 41], "contain": [22, 24, 37, 41, 46, 47, 50, 53, 69, 70, 71, 80, 82, 86, 87, 89, 93, 94, 95, 96, 98, 103], "explain": [22, 27, 32, 38, 41, 44, 49, 76, 92, 93, 98, 103], "multi_start_solv": [22, 33, 41], "callabl": [22, 33, 41], "is_cplex_instal": 23, "ico": 23, "topic": 23, "throw": 23, "determin": [23, 53, 72, 80, 82, 98, 103], "static": [23, 25, 28, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76], "sdp_solut": 24, "properti": [24, 26, 40, 96], "possibl": [24, 69, 94, 95, 97, 98, 103], "sdp": 24, "num_cut": 25, "sort_cut": 25, "unique_cut": 25, "seed": [25, 46, 53, 63, 66, 67, 97, 98, 99, 100, 103], "max": [25, 60, 95, 98, 100, 103], "w": [25, 92, 96, 97, 98, 99, 101], "therefor": [25, 101], "neg": [25, 95, 97], "adjac": [25, 60, 66], "max_cut_valu": 25, "adj_matrix": [25, 66, 97], "numpi": [25, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 94, 97, 98, 99, 100, 101, 103], "operation_count": 26, "n_input_qubit": 26, "n_output_qubit": 26, "intermediate_fv": 26, "threshold": [26, 38, 94, 95], "intermedi": [26, 29, 37, 38, 94, 99, 100], "getter": [26, 55, 57, 58, 59, 60, 63, 65, 66, 67, 68], "raw": [26, 31], "ga": [27, 95], "quadraticprogramconvert": [27, 32, 38, 44, 69, 70, 71, 72, 76], "By": [27, 32, 38, 44, 93, 97, 103], "attributeerror": 27, "is_gurobi_instal": 28, "suppress": 28, "info": 28, "stdout": 28, "sy": 28, "devnul": 28, "def": [28, 94, 97, 98, 99, 101, 102], "noop": 28, "arg": 28, "kwarg": 28, "flush": 28, "writelin": 28, "enum": [29, 36], "recursiveminimumeigenoptim": 29, "no_iter": 29, "last_iter": [29, 38], "last": [29, 37, 94, 97, 98], "all_iter": 29, "baseaggreg": [30, 44], "averag": [30, 99], "min_eigen_solver_result": [31, 99, 100], "samplingminimumeigensolverresult": 31, "numpyminimumeigensolverresult": 31, "underli": [31, 48, 93, 101], "assum": [32, 97, 103], "thereof": 32, "expand": 32, "good": [32, 97], "todo": 32, "smaller": 33, "_": [35, 98, 99, 101, 103], "x3": [35, 101], "union": 35, "possibli": 35, "succeed": 36, "histori": [37, 38, 96, 99], "recurs": [37, 38, 94], "minimumeigenoptimizerresult": 37, "min_num_vars_optim": [37, 38, 94], "min_num_var": [38, 94], "intermediateresult": 38, "meta": [38, 44], "top": [38, 85, 92, 103], "internal_optim": 38, "bravyi": [38, 94], "2019": [38, 72, 94, 95], "obstacl": [38, 94], "prepar": [38, 47, 94, 95, 98, 99, 103], "symmetri": [38, 94], "protect": [38, 94], "1910": [38, 94], "08980": [38, 94], "reach": [38, 97, 98], "remain": [38, 95, 101], "num_min_var": 38, "fx": 40, "imod": 40, "smode": 40, "slsqp": [40, 41], "exit": 40, "fmin_slsqp": [40, 41], "actual": [40, 95, 98, 100], "acc": 41, "iprint": 41, "full_output": 41, "request": 41, "verbos": 41, "silent": 41, "summari": 41, "upon": 41, "func": 41, "factori": [43, 44, 98], "overridden": 43, "behavior": [43, 101, 103], "mixer": [43, 44, 101], "warm": [43, 44], "regular": [43, 44], "xi": [43, 44], "create_initial_st": 43, "initial_vari": 43, "quantumcircuit": [43, 47, 50, 101], "create_initial_vari": 43, "create_mix": 43, "evolv": 43, "ry": [43, 97, 101], "theta": [43, 97, 98, 101], "rz": [43, 101], "2beta": 43, "num_initial_solut": 44, "warm_start_factori": 44, "daniel": 44, "egger": [44, 101], "2009": [44, 101], "10095": [44, 101], "circuit_factori": 44, "explicit": 44, "warmstartqaoacircuitfactori": 44, "ignor": [44, 49], "warmstartqaoafactori": 44, "sever": [44, 93], "next": [44, 94, 95, 101, 103], "presolv": 44, "verifi": [45, 95, 98], "commut": [45, 47, 103], "baseestim": 45, "verif": 45, "basis_sampl": 46, "roundingschem": [46, 49, 53], "magic": [46, 51, 103], "strateg": 46, "roundingcontext": [46, 49, 53, 103], "roundingresult": [46, 48, 49, 52, 53], "compression_ratio": [47, 103], "compress": [47, 82, 92, 103], "divid": [47, 58, 92, 103], "frozen": 47, "minimum_recovery_prob": 47, "num_qubit": [47, 97, 100, 103], "num_var": [47, 103], "runtimeerror": 47, "yet": 47, "q2var": [47, 103], "var2op": 47, "qubit_index": 47, "freez": 47, "prevent": 47, "state_preparation_circuit": 47, "relaxed_fv": [48, 103], "rounding_result": [48, 49, 103], "minimumeigensolverresult": [48, 49, 103], "rounding_schem": [49, 103], "auxiliari": 49, "process_result": [49, 103], "quantumrandomaccessoptimizationresult": [49, 103], "expectation_valu": [50, 51], "basis_shot": 51, "basis_count": 51, "atol": 53, "semi": [53, 101, 103], "resolv": 53, "max_weight": [54, 59, 100], "max_number_of_bin": 54, "optimizationappl": [54, 56, 57, 59, 61, 63, 64], "item": [54, 59, 100], "capac": [54, 59, 97, 100], "get_figur": 54, "plot": [54, 96, 97, 98, 99], "sum": [54, 61, 82, 93, 97, 98, 99, 100, 101, 103], "fig": 54, "items_in_bin": 54, "sample_most_lik": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 97], "state_vector": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "quasidistribut": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "statevector": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "quasi": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "to_quadratic_program": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 97, 100, 103], "graphoptimizationappl": [55, 58, 60, 65, 66, 67, 68, 100], "networkx": [55, 57, 58, 60, 65, 66, 67, 68, 97, 100, 103], "clique_": 55, "graph_theori": [55, 65], "suitabl": [55, 57, 58, 60, 65, 66, 67, 68, 94, 96, 98, 103], "build": [55, 57, 58, 60, 65, 66, 67, 68, 92, 101], "po": [55, 57, 58, 60, 65, 66, 67, 68, 97, 100, 103], "posit": [55, 57, 58, 60, 65, 66, 67, 68, 82, 93, 98, 100, 101], "node": [55, 57, 58, 60, 65, 66, 67, 68, 97, 98, 100, 102, 103], "exact": [56, 94, 96, 97, 98, 100], "exact_cov": 56, "answer": [57, 62, 97, 98], "understand": [57, 62, 94, 103], "graph_partit": 58, "knapsack_problem": 59, "maximum_cut": 60, "get_gset_result": 60, "gset": 60, "parse_gset_format": 60, "2d": 60, "number_set": 61, "partition_problem": 61, "half": 61, "num_sit": 63, "rng_or_se": 63, "variant": [63, 96], "normal": [63, 98], "varianc": [63, 103], "pseudo": 63, "default_rng": 63, "set_pack": 64, "stabl": [65, 100], "independent_set_": 65, "travel": [66, 98, 100], "salesman": [66, 98, 100], "travelling_salesman_problem": 66, "create_random_inst": [66, 67, 97], "coordin": [66, 67], "prospect": [66, 97], "cycl": [66, 97], "euc_2d": 66, "data": [66, 98], "tsp_valu": [66, 97], "citi": [66, 97, 100], "length": [66, 97], "num_vehicl": 67, "depot": [67, 98, 100], "vehicl": [67, 100], "rout": [67, 100], "vehicle_routing_problem": 67, "depart": 67, "vertex": [68, 97], "vertex_cov": [68, 100], "auto": 69, "conv": [69, 70, 76, 93, 100], "problem2": [69, 70, 76], "There": [69, 72, 97, 98], "unsupport": [69, 72, 86, 87], "sahar": 70, "karimi": 70, "pooya": 70, "ronagh": 70, "anneal": [70, 97], "1706": [70, 93], "01945": [70, 93], "suppli": 72, "pattern": 72, "kept": 72, "fred": 72, "glover": 72, "1811": 72, "11538": 72, "_flipproblemsens": [73, 74], "unchang": [73, 74], "quadratic_program": [78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 92], "quadraticprogramel": [78, 80, 82, 83, 85], "parent": [78, 79, 80, 81, 82, 83, 84, 85], "spars": [80, 82, 92], "dok_matrix": [80, 82], "gradient": [80, 82, 83], "to_arrai": [80, 82, 92], "to_dict": [80, 82, 92], "use_nam": [80, 82, 92], "symmetr": [82, 92, 96], "triangl": 82, "objsens": 83, "shape": 83, "expos": 85, "meant": 85, "extern": 85, "as_tupl": 85, "indicator_big_m": 86, "imaginari": 88, "never": [89, 90], "happen": [89, 90, 98], "quad_prog": 91, "compris": [91, 98], "page": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "01_quadratic_program": 92, "briefli": 92, "deal": [92, 97, 101], "align": [92, 97, 101], "q_0": [92, 103], "q_i": [92, 98], "a_i": [92, 93, 95], "r_i": 92, "l_i": 92, "u_i": [92, 98], "dimension": 92, "ibmdecisionoptim": 92, "io": [92, 102], "mdl": [92, 96, 99, 101, 102], "lb": [92, 98, 102], "ub": [92, 98, 102], "iso": [92, 102], "8859": [92, 102], "obj": [92, 98, 99, 102], "c1": [92, 97, 100], "qc1": 92, "lt": [92, 93, 94, 96, 100, 101, 102, 103], "comprehens": [92, 96, 103], "39": [92, 93, 94, 96, 97, 100, 101, 102, 103], "gt": [92, 93, 94, 96, 100, 102, 103], "my": 92, "again": [92, 93, 97, 98], "piec": 92, "qx": 92, "declar": 92, "dens": 92, "lin_leq": 92, "lin_geq": 92, "quad_eq": 92, "quad_leq": 92, "quad_geq": 92, "leftarrow": 92, "quadraticprogramstatu": 92, "itself": [92, 103], "ones": [92, 98], "infin": 92, "charact": 92, "_e": 92, "17": [92, 93, 94, 97, 101, 103], "informationsoftwareversionqiskit0": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "45": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "2qiskit_optimization0": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "18python": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "compilergcc": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "0python": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "builddefault": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "aug": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "28": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "2023": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "22oslinuxcpus2memori": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "60690689086914wed": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "jan": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "24": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "21": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "02": [92, 93, 94, 95, 98], "35": [92, 101], "2024": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "utc": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "02_converters_for_quadratic_program": 93, "power": [93, 97], "commonli": 93, "known": [93, 95, 96, 98, 103], "routin": [93, 97], "varieti": 93, "inequalitytoequalityconvert": 93, "symbol": 93, "With": [93, 97], "docplex_mp": 93, "xyz_leq": 93, "xyz_geq": 93, "ineq2eq": 93, "qp_eq": 93, "int_slack": [93, 100], "xyz": 93, "_leg": 93, "_slack": 93, "_geq": 93, "abl": [93, 98, 103], "satisfi": 93, "off": 93, "decim": 93, "point": [93, 97, 98], "minu": 93, "purpos": [93, 103], "cplex_optim": 93, "result_orig": 93, "result_eq": 93, "paper": 93, "_leq": 93, "int2bin": 93, "qp_eq_bin": 93, "ldot": [93, 96, 98], "result_eq_bin": 93, "sum_i": [93, 97], "1e5": 93, "lineq2penalti": 93, "26": [93, 100], "52": [93, 95, 100], "104": [93, 100], "208": [93, 100], "156": [93, 100], "117": [93, 100], "416": [93, 100], "312": [93, 100], "211": 93, "234": [93, 100, 101], "130": [93, 100], "260": [93, 100, 101], "210": 93, "209": 93, "418": [93, 101], "836": 93, "442": 93, "19": [93, 94, 97, 101, 103], "result_qubo": 93, "anymor": 93, "2qiskit_algorithms0": [93, 95, 98, 100], "40": 93, "03_minimum_eigen_optim": 94, "address": 94, "chemistri": 94, "illustr": [94, 101], "mention": [94, 103], "thrown": 94, "prohibit": 94, "workaround": 94, "luca": [94, 97], "front": 94, "phy": [94, 97], "2014": [94, 97, 98], "kliesch": 94, "koenig": 94, "tang": 94, "plot_histogram": [94, 97], "account": [94, 103], "iiz": 94, "izi": 94, "zii": 94, "izz": 94, "ziz": 94, "zzi": 94, "coeff": [94, 97, 100, 103], "sometim": 94, "random_se": [94, 97, 98, 99, 100, 101], "10598": [94, 97, 98], "qaoa_m": [94, 101], "initial_point": [94, 101], "exact_m": [94, 101, 103], "small": [94, 98, 101], "exact_result": [94, 95, 103], "qaoa_result": [94, 101], "fraction": 94, "consolid": [94, 103], "441060556229305": 94, "2276358338592764": 94, "1413286540160573": 94, "125721012041142": 94, "0205135502889646": 94, "0304358403671234": 94, "012388100140798": 94, "0009164530573331": 94, "get_filtered_sampl": 94, "allowed_statu": 94, "filtered_sampl": 94, "005": 94, "perspect": 94, "deviat": 94, "std": 94, "9364916731037085": 94, "despit": 94, "crunch": 94, "earli": [94, 97], "samples_for_plot": 94, "join": [94, 98, 101], "enumer": [94, 101], "rqaoa": 94, "rqaoa_result": 94, "0qiskit_algorithms0": [94, 96, 97, 99, 101, 102, 103], "2system": [94, 96, 97, 99, 101, 102, 103], "46": 94, "04_grover_optim": 95, "alongsid": 95, "oracl": 95, "recogn": 95, "min": 95, "notebook": [95, 98, 99, 103], "compon": [95, 97, 98, 100, 103], "gilliam": 95, "woerner": [95, 101], "gonciulea": 95, "polynomi": [95, 97, 98], "1912": 95, "04088": 95, "ingredi": 95, "o": [95, 102], "amplitud": 95, "diffus": 95, "rangle_n": [95, 101], "vari": 95, "loos": 95, "quadraticprogramtonegativevalueoracl": 95, "regist": 95, "rangle_m": 95, "o_i": 95, "clariti": 95, "formal": [95, 97, 98], "toi": 95, "eqnarrai": 95, "min_": [95, 96, 98, 101], "2x_0x_2": 95, "x_1x_2": 95, "1x_0": 95, "2x_1": 95, "3x_2": 95, "docplex_model1": [95, 101], "progress": [95, 99], "grover_optim": 95, "x_0": [95, 97, 99, 100, 103], "x_1": [95, 97, 99, 100, 103], "x_2": [95, 97, 99, 100, 103], "custom": [95, 96], "counter": 95, "shown": [95, 99, 101], "titl": [95, 98], "axi": [95, 98], "101": 95, "intens": 95, "bright": 95, "phase": [95, 96, 97, 98], "wheel": 95, "exact_solv": 95, "05_admm_optim": 96, "hereaft": 96, "mbco": 96, "appear": [96, 97, 101], "logist": [96, 98], "financ": [96, 97], "research": 96, "tackl": 96, "subseteq": 96, "varphi": 96, "mathrm": [96, 97, 98], "ell": 96, "assumpt": 96, "interc": 96, "squar": 96, "x_": [96, 97, 98, 99], "jointli": 96, "mbo": 96, "split": 96, "hold": [96, 103], "devis": 96, "decomposit": 96, "subproblem": 96, "cost": [96, 98, 101], "pyplot": [96, 97, 98, 99], "plt": [96, 97, 98, 99], "cobylaoptim": 96, "admm_optim": 96, "uncom": 96, "plan": 96, "simpl": [96, 97], "report": 96, "ex6": 96, "cons1": 96, "cons2": 96, "cons3": 96, "1001": 96, "gx": 96, "900": 96, "theorem": 96, "activ": [96, 98], "admm_param": 96, "0e": 96, "separ": 96, "convex_optim": 96, "xlabel": [96, 99], "ylabel": [96, 99], "admm_q": 96, "result_q": 96, "clf": 96, "03": [96, 102], "49": 96, "06_examples_max_cut_and_tsp": 97, "quantit": 97, "engin": 97, "lie": 97, "definit": [97, 101], "finit": 97, "countabl": 97, "infinit": 97, "criterion": 97, "typic": [97, 98, 103], "distanc": [97, 98, 100], "travers": 97, "consumpt": [97, 103], "profit": 97, "cluster": 97, "network": 97, "scienc": 97, "grasp": 97, "system": 97, "peopl": 97, "influenc": 97, "individu": [97, 98], "seen": 97, "pairwis": [97, 100], "mind": [97, 98], "market": 97, "suppos": 97, "bui": 97, "knowledg": 97, "strong": 97, "predict": 97, "outcom": [97, 98, 103], "ask": [97, 100], "revenu": 97, "undirect": [97, 100], "ji": [97, 98], "global": [97, 98], "summat": 97, "tild": 97, "textbf": 97, "person": 97, "principl": 97, "themselv": 97, "regard": 97, "likelihood": 97, "grant": 97, "w_i": 97, "const": 97, "z_iz_j": 97, "extent": 97, "consider": 97, "sai": 97, "speedup": 97, "target": [97, 98], "investig": [97, 98, 103], "inde": 97, "speed": [97, 98], "farhi": [97, 98], "goldston": [97, 98], "gutmann": [97, 98], "frame": 97, "higher": [97, 101, 103], "boldsymbol": [97, 98], "built": [97, 98, 101], "gate": [97, 98], "rotat": [97, 98, 101], "parameter": [97, 98], "togeth": [97, 98], "belief": 97, "difficulti": 97, "come": [97, 102], "wavefunct": [97, 98], "entangl": [97, 98], "u_": [97, 98], "collect": [97, 98, 100, 103], "fulli": [97, 98], "prod_": [97, 98], "theta_": [97, 98], "motiv": 97, "exploit": 97, "faster": 97, "adiabat": 97, "z_iz_jz_k": 97, "wherea": 97, "impract": 97, "frontier": 97, "1411": [97, 98], "4028": [97, 98], "wecker": 97, "hast": 97, "troyer": 97, "rev": 97, "94": 97, "022309": 97, "2016": 97, "neven": 97, "1703": 97, "06199": 97, "nx": [97, 100, 103], "twoloc": 97, "tsp": 97, "spsa": [97, 98], "add_nodes_from": 97, "arang": 97, "elist": 97, "add_weighted_edges_from": 97, "spring_layout": [97, 100, 103], "draw_graph": 97, "default_ax": 97, "frameon": 97, "draw_networkx": 97, "node_color": 97, "node_s": 97, "600": 97, "edge_label": 97, "get_edge_attribut": 97, "draw_networkx_edge_label": 97, "temp": 97, "get_edge_data": 97, "071509e": 97, "30": 97, "best_cost_brut": 97, "revers": [97, 99], "zfill": 97, "xbest_brut": 97, "nbest": 97, "max_cut": 97, "x_3": [97, 99, 100, 103], "qubitop": 97, "iizz": 97, "iziz": 97, "izzi": 97, "ziiz": 97, "zzii": 97, "lowest": 97, "eigenvector": 97, "ee": 97, "feedback": 97, "loop": [97, 99], "123": [97, 99, 100], "300": 97, "optimizer_tim": [97, 100, 103], "4996861455587294": 97, "333432912826538": 97, "999686145558729": 97, "vqe_optim": 97, "notori": 97, "attent": 97, "scientist": 97, "mathematician": 97, "centuri": 97, "bear": 97, "colloqui": 97, "speak": [97, 98], "goe": 97, "sell": 97, "merchandis": 97, "shortest": 97, "path": [97, 98], "visit": [97, 98, 100], "hometown": 97, "he": 97, "sale": 97, "least": [97, 100], "ubiquit": 97, "aris": [97, 103], "analysi": [97, 99], "hamilton": 97, "19th": 97, "whenev": 97, "summand": 97, "notin": 97, "boundari": 97, "equiv": 97, "sum_p": 97, "to_numpy_arrai": 97, "48": 97, "91": 97, "63": 97, "itertool": 97, "permut": 97, "brute_force_tsp": 97, "last_best_dist": 97, "1e10": 97, "pre_j": 97, "best_ord": 97, "best_dist": 97, "draw_tsp_solut": 97, "g2": 97, "digraph": 97, "add_edg": 97, "edge_color": 97, "font_color": 97, "202": 97, "x_0_0": 97, "x_1_1": 97, "x_1_2": 97, "x_2_1": 97, "x_2_2": 97, "x_0_1": 97, "x_1_0": 97, "x_2_0": 97, "x_0_2": 97, "c2": [97, 100], "c3": [97, 100], "c4": [97, 100], "c5": [97, 100], "qp2qubo": 97, "7581": 97, "iiiiiiiiz": [97, 100], "iiiiiiizi": [97, 100], "iiiiiizii": [97, 100], "iiiiiziii": [97, 100], "iiiiziiii": [97, 100], "iiiziiiii": [97, 100], "iiziiiiii": [97, 100], "iziiiiiii": [97, 100], "ziiiiiiii": [97, 100], "iiiiiiizz": [97, 100], "iiiiiiziz": [97, 100], "iiiiiizzi": [97, 100], "iiiiiziiz": [97, 100], "iiiiizizi": [97, 100], "iiiiizzii": [97, 100], "iiiiziiiz": [97, 100], "iiiiziizi": [97, 100], "iiiizizii": [97, 100], "iiiizziii": [97, 100], "iiiziiiiz": [97, 100], "iiiziiizi": [97, 100], "iiiziizii": [97, 100], "iiiziziii": [97, 100], "iiizziiii": [97, 100], "iiziiiiiz": [97, 100], "iiziiiizi": [97, 100], "iiziiizii": [97, 100], "iiziiziii": [97, 100], "iiziziiii": [97, 100], "iizziiiii": [97, 100], "iziiiiiiz": [97, 100], "iziiiiizi": [97, 100], "iziiiizii": [97, 100], "iziiiziii": [97, 100], "iziiziiii": [97, 100], "iziziiiii": [97, 100], "izziiiiii": [97, 100], "ziiiiiiiz": [97, 100], "ziiiiiizi": [97, 100], "ziiiiizii": [97, 100], "ziiiiziii": [97, 100], "ziiiziiii": [97, 100], "ziiziiiii": [97, 100], "ziziiiiii": [97, 100], "zziiiiiii": [97, 100], "1282": 97, "1268": 97, "1290": 97, "606": 97, "7379": 97, "7326": 97, "02469952184": 97, "786165952682495": 97, "04": [97, 98, 99, 100], "32": 97, "07_examples_vehicle_rout": 98, "major": 98, "industri": 98, "usd": 98, "8183": 98, "billion": 98, "2015": 98, "servic": 98, "truck": 98, "ship": 98, "overnight": 98, "serv": 98, "locat": 98, "dai": 98, "computation": 98, "challeng": 98, "mile": 98, "spent": 98, "ideal": 98, "showcas": 98, "overal": 98, "establish": 98, "ahead": 98, "deliveri": 98, "databas": 98, "wise": 98, "euclidean": 98, "crow": 98, "fli": 98, "perhap": 98, "twice": 98, "hybrid": 98, "partli": 98, "simplist": 98, "requisit": 98, "vrp": 98, "wherein": 98, "sought": 98, "appleg": 98, "mtz": 98, "miller": 98, "tucker": 98, "zemlin": 98, "1960": 98, "segment": 98, "convent": 98, "delta": 98, "elimin": [98, 103], "tour": 98, "0i": 98, "j0": 98, "u_j": 98, "q_j": 98, "neq": 98, "weigh": 98, "arch": 98, "branch": [98, 102], "sake": [98, 103], "bf": 98, "01": 98, "dimens": 98, "stress": 98, "emploi": [98, 103], "worthwhil": 98, "summar": 98, "necessari": [98, 99, 100], "throughout": 98, "notabl": 98, "augment": 98, "lagrangian": 98, "ih": 98, "_i": [98, 101], "_n": 98, "_0": 98, "That": 98, "2an": 98, "2ak": 98, "stack": 98, "acm": 98, "326": 98, "329": 98, "doi": 98, "1145": 98, "321043": 98, "321046": 98, "bixbi": 98, "chv\u00e1tal": 98, "cook": 98, "princeton": 98, "univers": 98, "press": 98, "isbn": 98, "978": 98, "691": 98, "12993": 98, "cplexerror": 98, "math": 98, "place": [98, 103], "plane": 98, "__init__": 98, "generate_inst": 98, "33": 98, "1543": [98, 99], "xc": 98, "rand": 98, "yc": 98, "ii": 98, "jj": 98, "classicaloptim": 98, "compute_allowed_combin": 98, "cplex_solut": 98, "refactor": 98, "my_obj": 98, "reshap": 98, "my_ub": 98, "my_lb": 98, "my_ctyp": 98, "my_rh": 98, "my_sens": 98, "my_prob": 98, "populatebyrow": 98, "exc": 98, "get_valu": 98, "get_objective_valu": 98, "prob": [98, 100], "set_sens": 98, "set_log_stream": 98, "set_error_stream": 98, "set_warning_stream": 98, "set_results_stream": 98, "row": 98, "col": 98, "coef": 98, "lin_expr": 98, "classical_optim": 98, "fashion": 98, "classical_cost": 98, "miss": 98, "visualize_solut": 98, "title_str": 98, "figur": [98, 99], "scatter": 98, "200": 98, "annot": 98, "grid": 98, "ix": 98, "arrow": 98, "length_includes_head": 98, "head_width": 98, "star": 98, "quantumoptim": 98, "binary_represent": 98, "algebra": 98, "construct_problem": 98, "solve_problem": 98, "minimuneigenoptim": 98, "x_sol": 98, "instance_vec": 98, "w_list": 98, "id_n": 98, "ey": 98, "im_n_1": 98, "iv_n_1": 98, "iv_n": 98, "neg_iv_n_1": 98, "vn": 98, "kron": 98, "contribut": 98, "fun": [98, 103], "lambda": [98, 99, 101], "quantum_optim": 98, "saniti": [98, 103], "binary_cost": 98, "unavail": 98, "nameerror": 98, "132": 98, "11148115684045": 98, "1114811568365": 98, "hour": 98, "log": 98, "what": 98, "quantum_solut": 98, "quantum_cost": 98, "x_quantum": 98, "kk": 98, "comparison": [98, 103], "coincid": 98, "ilp": 98, "optima": 98, "harder": 98, "wave": 98, "38": 98, "08_cvar_optim": 99, "risk": 99, "particularli": 99, "confid": 99, "tradeoff": 99, "smoothen": 99, "landscap": 99, "barkoutso": 99, "256": 99, "linearequalitytopenalti": 99, "123456": 99, "asset": 99, "budget": 99, "mu": [99, 101], "7313": 99, "9893": 99, "2725": 99, "8750": 99, "7667": 99, "3622": 99, "sigma": [99, 101], "7312": 99, "6233": 99, "4689": 99, "5452": 99, "0082": 99, "3809": 99, "4732": 99, "7538": 99, "4659": 99, "0733": 99, "8945": 99, "4095": 99, "0007": 99, "4301": 99, "5067": 99, "2012": 99, "0922": 99, "6231": 99, "1509": 99, "8992": 99, "random_model": 99, "covari": 99, "portfolio_optim": 99, "opt_result": 99, "27835": 99, "x_4": [99, 100, 103], "x_5": [99, 100, 103], "linear2penalti": 99, "num_paramet": 99, "50": 99, "callback": 99, "stddev": 99, "real_if_clos": 99, "opt_alg": 99, "2783500000000174": 99, "figsiz": 99, "linewidth": 99, "label": 99, "2f": [99, 103], "legend": 99, "loc": 99, "fontsiz": 99, "xlim": 99, "xtick": 99, "ytick": 99, "objective_valu": 99, "x_bin": 99, "sb": 99, "argsort": 99, "fromit": 99, "binary_prob": 99, "dtype": 99, "4f": 99, "00": [99, 102], "0000": 99, "2895": 99, "09_application_class": 100, "subcollect": 100, "multiset": 100, "disjoint": 100, "cliqu": 100, "induc": 100, "subgraph": 100, "endpoint": 100, "beforehand": 100, "vertexcov": 100, "random_regular_graph": [100, 103], "c6": 100, "c7": 100, "c8": 100, "nsolut": 100, "ntime": 100, "4008533954620361": 100, "964665412902832": 100, "624": 100, "520": 100, "468": 100, "780": 100, "936": 100, "832": 100, "1040": 100, "1248": 100, "650": 100, "1560": 100, "2080": 100, "1043": 100, "1564": 100, "2085": 100, "2606": 100, "3127": 100, "2600": 100, "num": 100, "1417": 100, "258": [100, 101], "388": 100, "517": 100, "647": 100, "776": 100, "390": 100, "195": 100, "65": 100, "10_warm_start_qaoa": 101, "tx": 101, "Such": 101, "marecek": 101, "quadratic_program_to_qubo": 101, "create_problem": 101, "relax_problem": 101, "relaxed_problem": 101, "deepcopi": 101, "0913": 101, "2415": 101, "4436": 101, "892": 101, "4051": 101, "07978412": 101, "00768914": 101, "11227606": 101, "06842969": 101, "01016793": 101, "00839765": 101, "10922887": 101, "03043424": 101, "0020045": 101, "00670929": 101, "0147937": 101, "985353": 101, "02307313": 101, "05249785": 101, "00904119": 101, "6043817": 101, "03740115": 101, "00945322": 101, "79839634": 101, "07616951": 101, "08464544": 101, "15956824": 101, "03075656": 101, "44910424": 101, "27371876": 101, "04067172": 101, "x4": 101, "0335906": 101, "21845774": 101, "12173696": 101, "008018": 101, "02683716": 101, "0591748": 101, "970706": 101, "09229252": 101, "2099914": 101, "03616476": 101, "2087634": 101, "1496046": 101, "03781288": 101, "59679268": 101, "30467804": 101, "16929088": 101, "7689322": 101, "44": 101, "848800180000005": 101, "85": 101, "40922044000001": 101, "82756812000001": 101, "10474512000002": 101, "33779216000002": 101, "34487328000002": 101, "42": 101, "907689680000004": 101, "25672692": 101, "37044588": 101, "40530104000001": 101, "43763868000002": 101, "659937940000006": 101, "47075640000001": 101, "16847248000002": 101, "41462864000002": 101, "43": 101, "89799534000001": 101, "52806848000002": 101, "34065100000001": 101, "286024620000006": 101, "68314192000001": 101, "858522820000005": 101, "259": 101, "55339164000003": 101, "22669164": 101, "262": 101, "37689164": 101, "57899164": 101, "267": 101, "02739164": 101, "54049164": 101, "384": 101, "20308746000006": 101, "sol": 101, "012055025682855": 101, "1752499576180142": 101, "4803888163988428e": 101, "07": 101, "9709053264087596": 101, "7384168677494174": 101, "9999999916475085": 101, "14438904470168756": 101, "c_star": 101, "12345": 101, "768932200000002": 101, "phi": 101, "bigotimes_": 101, "r_y": 101, "theta_i": 101, "angl": 101, "arcsin": 101, "init_qc": 101, "idx": 101, "mpl": 101, "style": 101, "clifford": 101, "chose": 101, "h_": 101, "pmatrix": 101, "2c_i": 101, "c_i": 101, "\u03b2": 101, "ws_mixer": 101, "ws_qaoa_m": 101, "initial_st": 101, "ws_qaoa": 101, "ws_qaoa_result": 101, "much": 101, "format_qaoa_sampl": 101, "max_len": 101, "qaoa_r": 101, "3f": 101, "1e2": 101, "1f": 101, "001110": 101, "769": 101, "011010": 101, "744": 101, "001011": 101, "671": 101, "101010": 101, "626": 101, "010110": 101, "100110": 101, "953": 101, "000111": 101, "349": 101, "110010": 101, "410": 101, "010011": 101, "013": 101, "100011": 101, "559": 101, "79": 101, "ws_result": 101, "05": [101, 102, 103], "11_using_classical_optimization_solvers_and_model": 102, "api": 102, "cplex_result": 102, "gurobi_result": 102, "restrict": 102, "expir": 102, "2025": 102, "timelimit": 102, "identifi": [102, 103], "54982fbec": 102, "cpxparam_read_datacheck": 102, "cpxparam_thread": 102, "cpxparam_timelimit": 102, "10000000000000001": 102, "incumb": 102, "000000": 102, "sec": 102, "tick": 102, "amp": 102, "sequenti": 102, "ndisplai": 102, "04479373836719089": 102, "0823748955316876": 102, "05075335682388141": 102, "26133940464887717": 102, "029641253806316496": 102, "docplex_model": 102, "dvar": 102, "stringio": 102, "tempfil": 102, "namedtemporaryfil": 102, "gp": 102, "gpy_displai": 102, "tmp_file": 102, "gurobipy_model": 102, "addvar": 102, "vtype": 102, "grb": 102, "setobject": 102, "addconstr": 102, "brows": 102, "captur": 102, "r0": 102, "docpblex": 102, "qp2": 102, "too": 102, "gmod": 102, "dmod": 102, "nconvert": 102, "ind_mod": 102, "add_ind": 102, "lc1": 102, "nativ": 102, "ncplex": 102, "optimal_solut": 102, "12_quantum_random_access_optim": 103, "proceed": 103, "num_nod": 103, "with_label": 103, "accommod": 103, "achiev": 103, "examin": 103, "aka": 103, "xx": 103, "xy": 103, "xz": 103, "yx": 103, "zx": 103, "yy": 103, "yz": 103, "zy": 103, "zz": 103, "successfulli": 103, "desir": 103, "pdf": 103, "03167v2": 103, "semidterministic_round": 103, "move": 103, "forward": 103, "flow": 103, "adjust": 103, "unit": 103, "999999982343004": 103, "tell": 103, "belong": 103, "maxcut_partit": 103, "vqeresult": 103, "0x7fe311b324f0": 103, "semideterministricround": 103, "candid": 103, "assess": 103, "67": 103, "impact": 103, "divers": 103, "enhanc": 103, "aim": 103, "largest": 103, "tail": 103, "magic_round": 103, "999995758642516": 103, "nondeterminist": 103, "duplic": 103, "empir": 103, "56": 103, "0096": 103, "011199999999999998": 103, "0196": 103, "0206": 103, "0203": 103, "0214": 103, "0197": 103, "020699999999999996": 103, "0228": 103, "024000000000000004": 103, "benefici": 103, "especi": 103, "across": 103, "focu": 103, "sole": 103, "entri": 103, "encapsul": 103, "dir": 103, "startswith": 103, "getattr": 103, "aux_operators_evalu": 103, "010834485173358988": 103, "9999999911928379": 103, "026075694416300015": 103, "9999999911926416": 103, "01044933784106082": 103, "9999999999999999": 103, "04120945001189341": 103, "028659359200668803": 103, "9999999991301689": 103, "0140861071530678": 103, "9999999991299727": 103, "algorithmresult": 103, "0x7fe311bc8a00": 103, "cost_function_ev": 103, "125": 103, "4999963592563175": 103, "optimal_circuit": 103, "\u03b8": 103, "q_1": 103, "optimal_paramet": 103, "parametervectorel": 103, "8435923652525493": 103, "3250925009847143": 103, "831780475663921": 103, "983319002738171": 103, "062462319072777": 103, "4724970429168071": 103, "1865524872503596": 103, "227286108126292": 103, "optimal_point": 103, "84359237": 103, "3250925": 103, "83178048": 103, "983319": 103, "06246232": 103, "47249704": 103, "18655249": 103, "22728611": 103, "optimal_valu": 103, "optimizer_ev": 103, "optimizer_result": 103, "jac": 103, "nfev": 103, "nit": 103, "njev": 103, "3538167476654053": 103, "sdr_result": 103, "qrao_results_sdr": 103, "999996359256318": 103, "mr_result": 103, "qrao_results_mr": 103, "pedagog": 103, "unexpect": 103, "bug": 103, "discov": 103, "submit": 103, "encodingcommutationverifi": 103, "discrep": 103, "str_dvar": 103, "obj_val": 103, "encoded_obj_v": 103, "isclos": 103, "quit": 103, "greatli": 103, "appreci": 103, "51": 103}, "objects": {"": [[0, 0, 0, "-", "qiskit_optimization"]], "qiskit_optimization": [[15, 1, 1, "", "QiskitOptimizationError"], [16, 3, 1, "", "QuadraticProgram"], [1, 0, 0, "-", "algorithms"], [3, 0, 0, "-", "applications"], [4, 0, 0, "-", "converters"], [5, 0, 0, "-", "problems"], [6, 0, 0, "-", "translators"]], "qiskit_optimization.QiskitOptimizationError": [[15, 2, 1, "", "with_traceback"]], "qiskit_optimization.QuadraticProgram": [[16, 2, 1, "", "binary_var"], [16, 2, 1, "", "binary_var_dict"], [16, 2, 1, "", "binary_var_list"], [16, 2, 1, "", "clear"], [16, 2, 1, "", "continuous_var"], [16, 2, 1, "", "continuous_var_dict"], [16, 2, 1, "", "continuous_var_list"], [16, 2, 1, "", "export_as_lp_string"], [16, 2, 1, "", "from_ising"], [16, 2, 1, "", "get_feasibility_info"], [16, 2, 1, "", "get_linear_constraint"], [16, 2, 1, "", "get_num_binary_vars"], [16, 2, 1, "", "get_num_continuous_vars"], [16, 2, 1, "", "get_num_integer_vars"], [16, 2, 1, "", "get_num_linear_constraints"], [16, 2, 1, "", "get_num_quadratic_constraints"], [16, 2, 1, "", "get_num_vars"], [16, 2, 1, "", "get_quadratic_constraint"], [16, 2, 1, "", "get_variable"], [16, 2, 1, "", "integer_var"], [16, 2, 1, "", "integer_var_dict"], [16, 2, 1, "", "integer_var_list"], [16, 2, 1, "", "is_feasible"], [16, 2, 1, "", "linear_constraint"], [16, 4, 1, "", "linear_constraints"], [16, 4, 1, "", "linear_constraints_index"], [16, 2, 1, "", "maximize"], [16, 2, 1, "", "minimize"], [16, 4, 1, "", "name"], [16, 4, 1, "", "objective"], [16, 2, 1, "", "prettyprint"], [16, 2, 1, "", "quadratic_constraint"], [16, 4, 1, "", "quadratic_constraints"], [16, 4, 1, "", "quadratic_constraints_index"], [16, 2, 1, "", "read_from_lp_file"], [16, 2, 1, "", "remove_linear_constraint"], [16, 2, 1, "", "remove_quadratic_constraint"], [16, 4, 1, "", "status"], [16, 2, 1, "", "substitute_variables"], [16, 2, 1, "", "to_ising"], [16, 4, 1, "", "variables"], [16, 4, 1, "", "variables_index"], [16, 2, 1, "", "write_to_lp_file"]], "qiskit_optimization.algorithms": [[17, 3, 1, "", "ADMMOptimizationResult"], [18, 3, 1, "", "ADMMOptimizer"], [19, 3, 1, "", "ADMMParameters"], [20, 3, 1, "", "ADMMState"], [21, 3, 1, "", "BaseAggregator"], [22, 3, 1, "", "CobylaOptimizer"], [23, 3, 1, "", "CplexOptimizer"], [24, 3, 1, "", "GoemansWilliamsonOptimizationResult"], [25, 3, 1, "", "GoemansWilliamsonOptimizer"], [26, 3, 1, "", "GroverOptimizationResult"], [27, 3, 1, "", "GroverOptimizer"], [28, 3, 1, "", "GurobiOptimizer"], [29, 3, 1, "", "IntermediateResult"], [30, 3, 1, "", "MeanAggregator"], [31, 3, 1, "", "MinimumEigenOptimizationResult"], [32, 3, 1, "", "MinimumEigenOptimizer"], [33, 3, 1, "", "MultiStartOptimizer"], [34, 3, 1, "", "OptimizationAlgorithm"], [35, 3, 1, "", "OptimizationResult"], [36, 3, 1, "", "OptimizationResultStatus"], [37, 3, 1, "", "RecursiveMinimumEigenOptimizationResult"], [38, 3, 1, "", "RecursiveMinimumEigenOptimizer"], [39, 3, 1, "", "ScipyMilpOptimizer"], [40, 3, 1, "", "SlsqpOptimizationResult"], [41, 3, 1, "", "SlsqpOptimizer"], [42, 3, 1, "", "SolutionSample"], [43, 3, 1, "", "WarmStartQAOAFactory"], [44, 3, 1, "", "WarmStartQAOAOptimizer"], [2, 0, 0, "-", "qrao"]], "qiskit_optimization.algorithms.ADMMOptimizationResult": [[17, 4, 1, "", "fval"], [17, 2, 1, "", "get_correlations"], [17, 2, 1, "", "prettyprint"], [17, 4, 1, "", "raw_results"], [17, 4, 1, "", "samples"], [17, 4, 1, "", "state"], [17, 4, 1, "", "status"], [17, 4, 1, "", "variable_names"], [17, 4, 1, "", "variables"], [17, 4, 1, "", "variables_dict"], [17, 4, 1, "", "x"]], "qiskit_optimization.algorithms.ADMMOptimizer": [[18, 2, 1, "", "get_compatibility_msg"], [18, 2, 1, "", "is_compatible"], [18, 4, 1, "", "parameters"], [18, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.BaseAggregator": [[21, 2, 1, "", "aggregate"]], "qiskit_optimization.algorithms.CobylaOptimizer": [[22, 4, 1, "", "clip"], [22, 2, 1, "", "get_compatibility_msg"], [22, 2, 1, "", "is_compatible"], [22, 2, 1, "", "multi_start_solve"], [22, 2, 1, "", "solve"], [22, 4, 1, "", "trials"]], "qiskit_optimization.algorithms.CplexOptimizer": [[23, 4, 1, "", "cplex_parameters"], [23, 4, 1, "", "disp"], [23, 2, 1, "", "get_compatibility_msg"], [23, 2, 1, "", "is_compatible"], [23, 2, 1, "", "is_cplex_installed"], [23, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult": [[24, 4, 1, "", "fval"], [24, 2, 1, "", "get_correlations"], [24, 2, 1, "", "prettyprint"], [24, 4, 1, "", "raw_results"], [24, 4, 1, "", "samples"], [24, 4, 1, "", "sdp_solution"], [24, 4, 1, "", "status"], [24, 4, 1, "", "variable_names"], [24, 4, 1, "", "variables"], [24, 4, 1, "", "variables_dict"], [24, 4, 1, "", "x"]], "qiskit_optimization.algorithms.GoemansWilliamsonOptimizer": [[25, 2, 1, "", "get_compatibility_msg"], [25, 2, 1, "", "is_compatible"], [25, 2, 1, "", "max_cut_value"], [25, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.GroverOptimizationResult": [[26, 4, 1, "", "fval"], [26, 2, 1, "", "get_correlations"], [26, 4, 1, "", "intermediate_fval"], [26, 4, 1, "", "n_input_qubits"], [26, 4, 1, "", "n_output_qubits"], [26, 4, 1, "", "operation_counts"], [26, 2, 1, "", "prettyprint"], [26, 4, 1, "", "raw_results"], [26, 4, 1, "", "raw_samples"], [26, 4, 1, "", "samples"], [26, 4, 1, "", "status"], [26, 4, 1, "", "threshold"], [26, 4, 1, "", "variable_names"], [26, 4, 1, "", "variables"], [26, 4, 1, "", "variables_dict"], [26, 4, 1, "", "x"]], "qiskit_optimization.algorithms.GroverOptimizer": [[27, 2, 1, "", "get_compatibility_msg"], [27, 2, 1, "", "is_compatible"], [27, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.GurobiOptimizer": [[28, 4, 1, "", "disp"], [28, 2, 1, "", "get_compatibility_msg"], [28, 2, 1, "", "is_compatible"], [28, 2, 1, "", "is_gurobi_installed"], [28, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.IntermediateResult": [[29, 4, 1, "", "ALL_ITERATIONS"], [29, 4, 1, "", "LAST_ITERATION"], [29, 4, 1, "", "NO_ITERATIONS"]], "qiskit_optimization.algorithms.MeanAggregator": [[30, 2, 1, "", "aggregate"]], "qiskit_optimization.algorithms.MinimumEigenOptimizationResult": [[31, 4, 1, "", "fval"], [31, 2, 1, "", "get_correlations"], [31, 4, 1, "", "min_eigen_solver_result"], [31, 2, 1, "", "prettyprint"], [31, 4, 1, "", "raw_results"], [31, 4, 1, "", "raw_samples"], [31, 4, 1, "", "samples"], [31, 4, 1, "", "status"], [31, 4, 1, "", "variable_names"], [31, 4, 1, "", "variables"], [31, 4, 1, "", "variables_dict"], [31, 4, 1, "", "x"]], "qiskit_optimization.algorithms.MinimumEigenOptimizer": [[32, 2, 1, "", "get_compatibility_msg"], [32, 2, 1, "", "is_compatible"], [32, 4, 1, "", "min_eigen_solver"], [32, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.MultiStartOptimizer": [[33, 4, 1, "", "clip"], [33, 2, 1, "", "get_compatibility_msg"], [33, 2, 1, "", "is_compatible"], [33, 2, 1, "", "multi_start_solve"], [33, 2, 1, "", "solve"], [33, 4, 1, "", "trials"]], "qiskit_optimization.algorithms.OptimizationAlgorithm": [[34, 2, 1, "", "get_compatibility_msg"], [34, 2, 1, "", "is_compatible"], [34, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.OptimizationResult": [[35, 4, 1, "", "fval"], [35, 2, 1, "", "get_correlations"], [35, 2, 1, "", "prettyprint"], [35, 4, 1, "", "raw_results"], [35, 4, 1, "", "samples"], [35, 4, 1, "", "status"], [35, 4, 1, "", "variable_names"], [35, 4, 1, "", "variables"], [35, 4, 1, "", "variables_dict"], [35, 4, 1, "", "x"]], "qiskit_optimization.algorithms.OptimizationResultStatus": [[36, 4, 1, "", "FAILURE"], [36, 4, 1, "", "INFEASIBLE"], [36, 4, 1, "", "SUCCESS"]], "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult": [[37, 4, 1, "", "fval"], [37, 2, 1, "", "get_correlations"], [37, 4, 1, "", "history"], [37, 2, 1, "", "prettyprint"], [37, 4, 1, "", "raw_results"], [37, 4, 1, "", "replacements"], [37, 4, 1, "", "samples"], [37, 4, 1, "", "status"], [37, 4, 1, "", "variable_names"], [37, 4, 1, "", "variables"], [37, 4, 1, "", "variables_dict"], [37, 4, 1, "", "x"]], "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer": [[38, 2, 1, "", "get_compatibility_msg"], [38, 2, 1, "", "is_compatible"], [38, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.ScipyMilpOptimizer": [[39, 4, 1, "", "disp"], [39, 2, 1, "", "get_compatibility_msg"], [39, 2, 1, "", "is_compatible"], [39, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.SlsqpOptimizationResult": [[40, 4, 1, "", "fval"], [40, 4, 1, "", "fx"], [40, 2, 1, "", "get_correlations"], [40, 4, 1, "", "imode"], [40, 4, 1, "", "its"], [40, 2, 1, "", "prettyprint"], [40, 4, 1, "", "raw_results"], [40, 4, 1, "", "samples"], [40, 4, 1, "", "smode"], [40, 4, 1, "", "status"], [40, 4, 1, "", "variable_names"], [40, 4, 1, "", "variables"], [40, 4, 1, "", "variables_dict"], [40, 4, 1, "", "x"]], "qiskit_optimization.algorithms.SlsqpOptimizer": [[41, 4, 1, "", "clip"], [41, 2, 1, "", "get_compatibility_msg"], [41, 2, 1, "", "is_compatible"], [41, 2, 1, "", "multi_start_solve"], [41, 2, 1, "", "solve"], [41, 4, 1, "", "trials"]], "qiskit_optimization.algorithms.SolutionSample": [[42, 4, 1, "", "fval"], [42, 4, 1, "", "probability"], [42, 4, 1, "", "status"], [42, 4, 1, "", "x"]], "qiskit_optimization.algorithms.WarmStartQAOAFactory": [[43, 2, 1, "", "create_initial_state"], [43, 2, 1, "", "create_initial_variables"], [43, 2, 1, "", "create_mixer"]], "qiskit_optimization.algorithms.WarmStartQAOAOptimizer": [[44, 2, 1, "", "get_compatibility_msg"], [44, 2, 1, "", "is_compatible"], [44, 4, 1, "", "min_eigen_solver"], [44, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.qrao": [[45, 3, 1, "", "EncodingCommutationVerifier"], [46, 3, 1, "", "MagicRounding"], [47, 3, 1, "", "QuantumRandomAccessEncoding"], [48, 3, 1, "", "QuantumRandomAccessOptimizationResult"], [49, 3, 1, "", "QuantumRandomAccessOptimizer"], [50, 3, 1, "", "RoundingContext"], [51, 3, 1, "", "RoundingResult"], [52, 3, 1, "", "RoundingScheme"], [53, 3, 1, "", "SemideterministicRounding"]], "qiskit_optimization.algorithms.qrao.MagicRounding": [[46, 4, 1, "", "basis_sampling"], [46, 2, 1, "", "round"], [46, 4, 1, "", "sampler"]], "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding": [[47, 4, 1, "", "compression_ratio"], [47, 2, 1, "", "encode"], [47, 2, 1, "", "freeze"], [47, 4, 1, "", "frozen"], [47, 4, 1, "", "max_vars_per_qubit"], [47, 4, 1, "", "minimum_recovery_probability"], [47, 4, 1, "", "num_qubits"], [47, 4, 1, "", "num_vars"], [47, 4, 1, "", "offset"], [47, 4, 1, "", "problem"], [47, 4, 1, "", "q2vars"], [47, 4, 1, "", "qubit_op"], [47, 2, 1, "", "state_preparation_circuit"], [47, 4, 1, "", "var2op"]], "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult": [[48, 4, 1, "", "encoding"], [48, 4, 1, "", "fval"], [48, 2, 1, "", "get_correlations"], [48, 2, 1, "", "prettyprint"], [48, 4, 1, "", "raw_results"], [48, 4, 1, "", "relaxed_fval"], [48, 4, 1, "", "relaxed_result"], [48, 4, 1, "", "rounding_result"], [48, 4, 1, "", "samples"], [48, 4, 1, "", "status"], [48, 4, 1, "", "variable_names"], [48, 4, 1, "", "variables"], [48, 4, 1, "", "variables_dict"], [48, 4, 1, "", "x"]], "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer": [[49, 2, 1, "", "get_compatibility_msg"], [49, 2, 1, "", "is_compatible"], [49, 4, 1, "", "max_vars_per_qubit"], [49, 4, 1, "", "min_eigen_solver"], [49, 2, 1, "", "process_result"], [49, 4, 1, "", "rounding_scheme"], [49, 2, 1, "", "solve"], [49, 2, 1, "", "solve_relaxed"]], "qiskit_optimization.algorithms.qrao.RoundingContext": [[50, 4, 1, "", "circuit"], [50, 4, 1, "", "encoding"], [50, 4, 1, "", "expectation_values"]], "qiskit_optimization.algorithms.qrao.RoundingResult": [[51, 4, 1, "", "bases"], [51, 4, 1, "", "basis_counts"], [51, 4, 1, "", "basis_shots"], [51, 4, 1, "", "expectation_values"], [51, 4, 1, "", "samples"]], "qiskit_optimization.algorithms.qrao.RoundingScheme": [[52, 2, 1, "", "round"]], "qiskit_optimization.algorithms.qrao.SemideterministicRounding": [[53, 2, 1, "", "round"]], "qiskit_optimization.applications": [[54, 3, 1, "", "BinPacking"], [55, 3, 1, "", "Clique"], [56, 3, 1, "", "ExactCover"], [57, 3, 1, "", "GraphOptimizationApplication"], [58, 3, 1, "", "GraphPartition"], [59, 3, 1, "", "Knapsack"], [60, 3, 1, "", "Maxcut"], [61, 3, 1, "", "NumberPartition"], [62, 3, 1, "", "OptimizationApplication"], [63, 3, 1, "", "SKModel"], [64, 3, 1, "", "SetPacking"], [65, 3, 1, "", "StableSet"], [66, 3, 1, "", "Tsp"], [67, 3, 1, "", "VehicleRouting"], [68, 3, 1, "", "VertexCover"]], "qiskit_optimization.applications.BinPacking": [[54, 2, 1, "", "get_figure"], [54, 2, 1, "", "interpret"], [54, 2, 1, "", "sample_most_likely"], [54, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Clique": [[55, 2, 1, "", "draw"], [55, 4, 1, "", "graph"], [55, 2, 1, "", "interpret"], [55, 2, 1, "", "sample_most_likely"], [55, 4, 1, "", "size"], [55, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.ExactCover": [[56, 2, 1, "", "interpret"], [56, 2, 1, "", "sample_most_likely"], [56, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.GraphOptimizationApplication": [[57, 2, 1, "", "draw"], [57, 4, 1, "", "graph"], [57, 2, 1, "", "interpret"], [57, 2, 1, "", "sample_most_likely"], [57, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.GraphPartition": [[58, 2, 1, "", "draw"], [58, 4, 1, "", "graph"], [58, 2, 1, "", "interpret"], [58, 2, 1, "", "sample_most_likely"], [58, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Knapsack": [[59, 2, 1, "", "interpret"], [59, 4, 1, "", "max_weight"], [59, 2, 1, "", "sample_most_likely"], [59, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Maxcut": [[60, 2, 1, "", "draw"], [60, 2, 1, "", "get_gset_result"], [60, 4, 1, "", "graph"], [60, 2, 1, "", "interpret"], [60, 2, 1, "", "parse_gset_format"], [60, 2, 1, "", "sample_most_likely"], [60, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.NumberPartition": [[61, 2, 1, "", "interpret"], [61, 2, 1, "", "sample_most_likely"], [61, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.OptimizationApplication": [[62, 2, 1, "", "interpret"], [62, 2, 1, "", "sample_most_likely"], [62, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.SKModel": [[63, 2, 1, "", "disorder"], [63, 4, 1, "", "graph"], [63, 2, 1, "", "interpret"], [63, 4, 1, "", "num_sites"], [63, 2, 1, "", "sample_most_likely"], [63, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.SetPacking": [[64, 2, 1, "", "interpret"], [64, 2, 1, "", "sample_most_likely"], [64, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.StableSet": [[65, 2, 1, "", "draw"], [65, 4, 1, "", "graph"], [65, 2, 1, "", "interpret"], [65, 2, 1, "", "sample_most_likely"], [65, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Tsp": [[66, 2, 1, "", "create_random_instance"], [66, 2, 1, "", "draw"], [66, 4, 1, "", "graph"], [66, 2, 1, "", "interpret"], [66, 2, 1, "", "parse_tsplib_format"], [66, 2, 1, "", "sample_most_likely"], [66, 2, 1, "", "to_quadratic_program"], [66, 2, 1, "", "tsp_value"]], "qiskit_optimization.applications.VehicleRouting": [[67, 2, 1, "", "create_random_instance"], [67, 4, 1, "", "depot"], [67, 2, 1, "", "draw"], [67, 4, 1, "", "graph"], [67, 2, 1, "", "interpret"], [67, 4, 1, "", "num_vehicles"], [67, 2, 1, "", "sample_most_likely"], [67, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.VertexCover": [[68, 2, 1, "", "draw"], [68, 4, 1, "", "graph"], [68, 2, 1, "", "interpret"], [68, 2, 1, "", "sample_most_likely"], [68, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.converters": [[69, 3, 1, "", "InequalityToEquality"], [70, 3, 1, "", "IntegerToBinary"], [71, 3, 1, "", "LinearEqualityToPenalty"], [72, 3, 1, "", "LinearInequalityToPenalty"], [73, 3, 1, "", "MaximizeToMinimize"], [74, 3, 1, "", "MinimizeToMaximize"], [75, 3, 1, "", "QuadraticProgramConverter"], [76, 3, 1, "", "QuadraticProgramToQubo"]], "qiskit_optimization.converters.InequalityToEquality": [[69, 2, 1, "", "convert"], [69, 2, 1, "", "interpret"], [69, 4, 1, "", "mode"]], "qiskit_optimization.converters.IntegerToBinary": [[70, 2, 1, "", "convert"], [70, 2, 1, "", "interpret"]], "qiskit_optimization.converters.LinearEqualityToPenalty": [[71, 2, 1, "", "convert"], [71, 2, 1, "", "interpret"], [71, 4, 1, "", "penalty"]], "qiskit_optimization.converters.LinearInequalityToPenalty": [[72, 2, 1, "", "convert"], [72, 2, 1, "", "interpret"], [72, 4, 1, "", "penalty"]], "qiskit_optimization.converters.MaximizeToMinimize": [[73, 2, 1, "", "convert"], [73, 2, 1, "", "interpret"]], "qiskit_optimization.converters.MinimizeToMaximize": [[74, 2, 1, "", "convert"], [74, 2, 1, "", "interpret"]], "qiskit_optimization.converters.QuadraticProgramConverter": [[75, 2, 1, "", "convert"], [75, 2, 1, "", "interpret"]], "qiskit_optimization.converters.QuadraticProgramToQubo": [[76, 2, 1, "", "convert"], [76, 2, 1, "", "get_compatibility_msg"], [76, 2, 1, "", "interpret"], [76, 2, 1, "", "is_compatible"], [76, 4, 1, "", "penalty"]], "qiskit_optimization.infinity": [[77, 5, 1, "", "INFINITY"]], "qiskit_optimization.problems": [[78, 3, 1, "", "Constraint"], [79, 3, 1, "", "LinearConstraint"], [80, 3, 1, "", "LinearExpression"], [81, 3, 1, "", "QuadraticConstraint"], [82, 3, 1, "", "QuadraticExpression"], [83, 3, 1, "", "QuadraticObjective"], [84, 3, 1, "", "QuadraticProgramElement"], [85, 3, 1, "", "Variable"]], "qiskit_optimization.problems.Constraint": [[78, 2, 1, "", "evaluate"], [78, 4, 1, "", "name"], [78, 4, 1, "", "quadratic_program"], [78, 4, 1, "", "rhs"], [78, 4, 1, "", "sense"]], "qiskit_optimization.problems.LinearConstraint": [[79, 2, 1, "", "evaluate"], [79, 4, 1, "", "linear"], [79, 4, 1, "", "name"], [79, 4, 1, "", "quadratic_program"], [79, 4, 1, "", "rhs"], [79, 4, 1, "", "sense"]], "qiskit_optimization.problems.LinearExpression": [[80, 4, 1, "", "bounds"], [80, 4, 1, "", "coefficients"], [80, 2, 1, "", "evaluate"], [80, 2, 1, "", "evaluate_gradient"], [80, 4, 1, "", "quadratic_program"], [80, 2, 1, "", "to_array"], [80, 2, 1, "", "to_dict"]], "qiskit_optimization.problems.QuadraticConstraint": [[81, 2, 1, "", "evaluate"], [81, 4, 1, "", "linear"], [81, 4, 1, "", "name"], [81, 4, 1, "", "quadratic"], [81, 4, 1, "", "quadratic_program"], [81, 4, 1, "", "rhs"], [81, 4, 1, "", "sense"]], "qiskit_optimization.problems.QuadraticExpression": [[82, 4, 1, "", "bounds"], [82, 4, 1, "", "coefficients"], [82, 2, 1, "", "evaluate"], [82, 2, 1, "", "evaluate_gradient"], [82, 4, 1, "", "quadratic_program"], [82, 2, 1, "", "to_array"], [82, 2, 1, "", "to_dict"]], "qiskit_optimization.problems.QuadraticObjective": [[83, 4, 1, "", "constant"], [83, 2, 1, "", "evaluate"], [83, 2, 1, "", "evaluate_gradient"], [83, 4, 1, "", "linear"], [83, 4, 1, "", "quadratic"], [83, 4, 1, "", "quadratic_program"], [83, 4, 1, "", "sense"]], "qiskit_optimization.problems.QuadraticProgramElement": [[84, 4, 1, "", "quadratic_program"]], "qiskit_optimization.problems.Variable": [[85, 2, 1, "", "as_tuple"], [85, 4, 1, "", "lowerbound"], [85, 4, 1, "", "name"], [85, 4, 1, "", "quadratic_program"], [85, 4, 1, "", "upperbound"], [85, 4, 1, "", "vartype"]], "qiskit_optimization.translators": [[86, 6, 1, "", "from_docplex_mp"], [87, 6, 1, "", "from_gurobipy"], [88, 6, 1, "", "from_ising"], [89, 6, 1, "", "to_docplex_mp"], [90, 6, 1, "", "to_gurobipy"], [91, 6, 1, "", "to_ising"]]}, "objtypes": {"0": "py:module", "1": "py:exception", "2": "py:method", "3": "py:class", "4": "py:attribute", "5": "py:data", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "exception", "Python exception"], "2": ["py", "method", "Python method"], "3": ["py", "class", "Python class"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"], "6": ["py", "function", "Python function"]}, "titleterms": {"qiskit": [0, 7, 10, 11, 12, 13, 102], "optim": [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104], "api": 0, "refer": [0, 8, 94, 95, 96, 98, 99, 101], "modul": 0, "qiskit_optim": [0, 1, 2, 3, 4, 5, 6], "submodul": [0, 1], "algorithm": [1, 2, 96], "base": [1, 3, 4], "class": [1, 3, 4, 97, 100], "result": [1, 96, 103], "quantum": [2, 8, 96, 97, 98, 99, 101, 103], "random": [2, 8, 103], "access": [2, 8, 103], "qrao": 2, "encod": [2, 8, 103], "round": [2, 8, 103], "scheme": [2, 8], "applic": [3, 97, 100], "convert": [4, 93, 94], "problem": [5, 8, 95, 97, 100, 103], "quadrat": [5, 6, 92, 93], "program": [5, 6, 92, 93], "translat": [6, 102], "explan": 7, "background": 8, "relax": [8, 101, 103], "code": 8, "A": 8, "simpl": 8, "via": 8, "qrac": 8, "1": [8, 98], "2": [8, 14, 98], "p": 8, "3": [8, 14, 96, 98], "recov": 8, "bit": 8, "hamiltonian": [8, 97, 98, 100, 103], "commut": 8, "semi": 8, "determinist": 8, "magic": 8, "state": 8, "get": 9, "start": [9, 101], "instal": 9, "option": 9, "readi": 9, "go": 9, "overview": [10, 11, 12], "next": 10, "step": [10, 98, 103], "v0": [11, 12], "5": [11, 14, 98], "migrat": [11, 12, 13], "guid": [11, 12, 13], "minimumeigenoptim": [11, 12, 32, 94], "numpyminimumeigensolv": [11, 12, 103], "qaoa": [11, 12, 101], "vqe": 11, "former": 11, "samplingvq": [11, 12, 99], "new": [11, 14], "warmstartqaoaoptim": [11, 12, 44], "groveroptim": [11, 12, 27, 95], "6": [12, 14], "releas": 14, "note": 14, "0": 14, "prelud": 14, "featur": 14, "upgrad": 14, "bug": 14, "fix": 14, "4": [14, 98], "other": 14, "deprec": 14, "qiskitoptimizationerror": 15, "quadraticprogram": [16, 92, 102], "admmoptimizationresult": 17, "admmoptim": 18, "admmparamet": 19, "admmstat": 20, "baseaggreg": 21, "cobylaoptim": 22, "cplexoptim": 23, "goemanswilliamsonoptimizationresult": 24, "goemanswilliamsonoptim": 25, "groveroptimizationresult": 26, "gurobioptim": 28, "intermediateresult": 29, "meanaggreg": 30, "minimumeigenoptimizationresult": 31, "multistartoptim": 33, "optimizationalgorithm": 34, "optimizationresult": 35, "optimizationresultstatu": 36, "recursiveminimumeigenoptimizationresult": 37, "recursiveminimumeigenoptim": [38, 94], "scipymilpoptim": 39, "slsqpoptimizationresult": 40, "slsqpoptim": 41, "solutionsampl": 42, "warmstartqaoafactori": 43, "encodingcommutationverifi": 45, "magicround": [46, 103], "quantumrandomaccessencod": 47, "quantumrandomaccessoptimizationresult": 48, "quantumrandomaccessoptim": [49, 103], "roundingcontext": 50, "roundingresult": 51, "roundingschem": 52, "semideterministicround": 53, "binpack": 54, "cliqu": 55, "exactcov": 56, "graphoptimizationappl": 57, "graphpartit": 58, "knapsack": [59, 100], "maxcut": 60, "numberpartit": 61, "optimizationappl": 62, "skmodel": 63, "setpack": 64, "stableset": 65, "tsp": 66, "vehiclerout": 67, "vertexcov": 68, "inequalitytoequ": [69, 93], "integertobinari": [70, 93], "linearequalitytopenalti": [71, 93], "linearinequalitytopenalti": 72, "maximizetominim": 73, "minimizetomaxim": 74, "quadraticprogramconvert": 75, "quadraticprogramtoqubo": 76, "infin": 77, "constraint": [78, 92, 102], "linearconstraint": 79, "linearexpress": 80, "quadraticconstraint": 81, "quadraticexpress": 82, "quadraticobject": 83, "quadraticprogramel": 84, "variabl": [85, 92], "from_docplex_mp": 86, "from_gurobipi": 87, "from_is": 88, "to_docplex_mp": 89, "to_gurobipi": 90, "to_is": 91, "introduct": [92, 94, 95, 96, 97, 98, 99, 100, 101], "load": 92, "from": [92, 98], "an": 92, "lp": 92, "file": 92, "docplex": [92, 102], "model": [92, 98, 102], "directli": 92, "construct": [92, 98], "ad": 92, "remov": 92, "linear": 92, "substitut": 92, "minimum": [94, 95, 99], "eigen": [94, 99], "qubo": [94, 95, 101], "sparsepauliop": 94, "solv": [94, 103], "analysi": [94, 101], "sampl": 94, "grover": 95, "adapt": 95, "search": 95, "find": 95, "us": [95, 98, 99, 102, 103], "check": [95, 97, 100], "correct": [95, 103], "valu": 95, "admm": 96, "initi": [96, 98], "exampl": 96, "classic": [96, 98, 102], "solut": [96, 98, 103], "paramet": 96, "call": 96, "h": 96, "solver": [96, 102], "max": 97, "cut": 97, "travel": 97, "salesman": 97, "weight": 97, "approxim": 97, "univers": 97, "comput": 97, "brute": 97, "forc": 97, "approach": 97, "map": 97, "Ising": [97, 98], "full": 97, "give": 97, "right": 97, "cost": 97, "run": 97, "vehicl": 98, "rout": 98, "The": 98, "qp": 98, "formul": 98, "ibm": 98, "ilog": 98, "cplex": 98, "ground": 98, "up": [98, 103], "improv": 99, "variat": 99, "cvar": 99, "portfolio": 99, "vertex": 100, "cover": 100, "how": [100, 103], "warm": 101, "preliminari": 101, "standard": 101, "cplexsolv": 102, "gurobisolv": 102, "between": 102, "gurobipi": 102, "indic": 102, "set": 103, "combinatori": 103, "interpret": 103, "inspect": 103, "subroutin": 103, "exact": 103, "altern": 103, "two": 103, "explicit": 103, "manual": 103, "perform": 103, "appendix": 103, "verifi": 103, "your": 103, "tutori": 104}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"Qiskit Optimization API Reference": [[0, "qiskit-optimization-api-reference"]], "Qiskit optimization module (qiskit_optimization)": [[0, "qiskit-optimization-module-qiskit-optimization"]], "Submodules": [[0, "submodules"], [1, "submodules"]], "Optimization algorithms (qiskit_optimization.algorithms)": [[1, "optimization-algorithms-qiskit-optimization-algorithms"]], "Base classes for algorithms and results": [[1, "base-classes-for-algorithms-and-results"]], "Algorithms and results": [[1, "algorithms-and-results"]], "Quantum Random Access Optimization (qiskit_optimization.algorithms.qrao)": [[2, "quantum-random-access-optimization-qiskit-optimization-algorithms-qrao"]], "Quantum Random Access Encoding and Optimization": [[2, "quantum-random-access-encoding-and-optimization"]], "Rounding schemes": [[2, "rounding-schemes"]], "Optimization applications (qiskit_optimization.applications)": [[3, "optimization-applications-qiskit-optimization-applications"]], "Base classes for applications": [[3, "base-classes-for-applications"]], "Applications": [[3, "applications"]], "Optimization converters (qiskit_optimization.converters)": [[4, "optimization-converters-qiskit-optimization-converters"]], "Base class for converters": [[4, "base-class-for-converters"]], "Converters": [[4, "converters"]], "Optimization problems (qiskit_optimization.problems)": [[5, "optimization-problems-qiskit-optimization-problems"]], "Quadratic program": [[5, "quadratic-program"]], "Quadratic program translators (qiskit_optimization.translators)": [[6, "quadratic-program-translators-qiskit-optimization-translators"]], "Translators": [[6, "translators"]], "Qiskit Optimization Explanations": [[7, "qiskit-optimization-explanations"]], "Explanations\u2026": [[7, "explanations"]], "Background on Quantum Random Access Optimization: Quantum relaxations, quantum random access codes, rounding schemes": [[8, "background-on-quantum-random-access-optimization-quantum-relaxations-quantum-random-access-codes-rounding-schemes"]], "Relaxations": [[8, "relaxations"]], "Quantum Relaxation": [[8, "quantum-relaxation"]], "A Simple Quantum Relaxation": [[8, "a-simple-quantum-relaxation"]], "Quantum Relaxations via Quantum Random Access Codes (QRACs)": [[8, "quantum-relaxations-via-quantum-random-access-codes-qracs"]], "(1,1,1), (2,1,p), and (3,1,p) Quantum Random Access Codes": [[8, "p-and-3-1-p-quantum-random-access-codes"]], "Recovering Encoded Bits": [[8, "recovering-encoded-bits"]], "Encoded Problem Hamiltonians": [[8, "encoded-problem-hamiltonians"]], "Commutation of Quantum Relaxation": [[8, "commutation-of-quantum-relaxation"]], "Quantum Rounding Schemes": [[8, "quantum-rounding-schemes"]], "Semi-deterministic Rounding": [[8, "semi-deterministic-rounding"]], "Magic State Rounding": [[8, "magic-state-rounding"]], "References": [[8, "references"], [94, "References"], [95, "References"], [96, "References"], [98, "References"], [99, "References"], [101, "References"]], "Getting started": [[9, "getting-started"]], "Installation": [[9, "installation"]], "Optional installs": [[9, "optional-installs"]], "Ready to get going?\u2026": [[9, "ready-to-get-going"]], "Qiskit Optimization overview": [[10, "qiskit-optimization-overview"]], "Overview": [[10, "overview"], [11, "overview"], [12, "overview"]], "Next Steps": [[10, "next-steps"]], "Qiskit Optimization v0.5 Migration Guide": [[11, "qiskit-optimization-v0-5-migration-guide"]], "MinimumEigenOptimizer": [[11, "minimumeigenoptimizer"], [12, "minimumeigenoptimizer"], [32, "minimumeigenoptimizer"]], "NumPyMinimumEigensolver": [[11, "numpyminimumeigensolver"], [12, "numpyminimumeigensolver"]], "QAOA": [[11, "qaoa"], [12, "qaoa"], [101, "QAOA"]], "VQE (former) \u2192 SamplingVQE (new)": [[11, "vqe-former-samplingvqe-new"]], "WarmStartQAOAOptimizer": [[11, "warmstartqaoaoptimizer"], [12, "warmstartqaoaoptimizer"], [44, "warmstartqaoaoptimizer"]], "GroverOptimizer": [[11, "groveroptimizer"], [12, "groveroptimizer"], [27, "groveroptimizer"]], "Qiskit Optimization v0.6 Migration Guide": [[12, "qiskit-optimization-v0-6-migration-guide"]], "SamplingVQE": [[12, "samplingvqe"]], "Qiskit Optimization Migration Guide": [[13, "qiskit-optimization-migration-guide"]], "Release Notes": [[14, "release-notes"]], "0.6.0": [[14, "release-notes-0-6-0"]], "Prelude": [[14, "prelude"], [14, "release-notes-0-5-0-prelude"]], "New Features": [[14, "new-features"], [14, "release-notes-0-5-0-new-features"], [14, "release-notes-0-4-0-new-features"], [14, "release-notes-0-3-0-new-features"], [14, "release-notes-0-2-0-new-features"]], "Upgrade Notes": [[14, "upgrade-notes"], [14, "release-notes-0-5-0-upgrade-notes"], [14, "release-notes-0-4-0-upgrade-notes"], [14, "release-notes-0-3-0-upgrade-notes"], [14, "release-notes-0-2-0-upgrade-notes"]], "Bug Fixes": [[14, "bug-fixes"], [14, "release-notes-0-5-0-bug-fixes"], [14, "release-notes-0-4-0-bug-fixes"], [14, "release-notes-0-3-0-bug-fixes"], [14, "release-notes-0-2-0-bug-fixes"]], "0.5.0": [[14, "release-notes-0-5-0"]], "0.4.0": [[14, "release-notes-0-4-0"]], "Other Notes": [[14, "other-notes"]], "0.3.0": [[14, "release-notes-0-3-0"]], "Deprecation Notes": [[14, "deprecation-notes"], [14, "release-notes-0-2-0-deprecation-notes"]], "0.2.0": [[14, "release-notes-0-2-0"]], "QiskitOptimizationError": [[15, "qiskitoptimizationerror"]], "QuadraticProgram": [[16, "quadraticprogram"]], "ADMMOptimizationResult": [[17, "admmoptimizationresult"]], "ADMMOptimizer": [[18, "admmoptimizer"]], "ADMMParameters": [[19, "admmparameters"]], "ADMMState": [[20, "admmstate"]], "BaseAggregator": [[21, "baseaggregator"]], "CobylaOptimizer": [[22, "cobylaoptimizer"]], "CplexOptimizer": [[23, "cplexoptimizer"]], "GoemansWilliamsonOptimizationResult": [[24, "goemanswilliamsonoptimizationresult"]], "GoemansWilliamsonOptimizer": [[25, "goemanswilliamsonoptimizer"]], "GroverOptimizationResult": [[26, "groveroptimizationresult"]], "GurobiOptimizer": [[28, "gurobioptimizer"]], "IntermediateResult": [[29, "intermediateresult"]], "MeanAggregator": [[30, "meanaggregator"]], "MinimumEigenOptimizationResult": [[31, "minimumeigenoptimizationresult"]], "MultiStartOptimizer": [[33, "multistartoptimizer"]], "OptimizationAlgorithm": [[34, "optimizationalgorithm"]], "OptimizationResult": [[35, "optimizationresult"]], "OptimizationResultStatus": [[36, "optimizationresultstatus"]], "RecursiveMinimumEigenOptimizationResult": [[37, "recursiveminimumeigenoptimizationresult"]], "RecursiveMinimumEigenOptimizer": [[38, "recursiveminimumeigenoptimizer"], [94, "RecursiveMinimumEigenOptimizer"]], "ScipyMilpOptimizer": [[39, "scipymilpoptimizer"]], "SlsqpOptimizationResult": [[40, "slsqpoptimizationresult"]], "SlsqpOptimizer": [[41, "slsqpoptimizer"]], "SolutionSample": [[42, "solutionsample"]], "WarmStartQAOAFactory": [[43, "warmstartqaoafactory"]], "EncodingCommutationVerifier": [[45, "encodingcommutationverifier"]], "MagicRounding": [[46, "magicrounding"]], "QuantumRandomAccessEncoding": [[47, "quantumrandomaccessencoding"]], "QuantumRandomAccessOptimizationResult": [[48, "quantumrandomaccessoptimizationresult"]], "QuantumRandomAccessOptimizer": [[49, "quantumrandomaccessoptimizer"]], "RoundingContext": [[50, "roundingcontext"]], "RoundingResult": [[51, "roundingresult"]], "RoundingScheme": [[52, "roundingscheme"]], "SemideterministicRounding": [[53, "semideterministicrounding"]], "BinPacking": [[54, "binpacking"]], "Clique": [[55, "clique"]], "ExactCover": [[56, "exactcover"]], "GraphOptimizationApplication": [[57, "graphoptimizationapplication"]], "GraphPartition": [[58, "graphpartition"]], "Knapsack": [[59, "knapsack"]], "Maxcut": [[60, "maxcut"]], "NumberPartition": [[61, "numberpartition"]], "OptimizationApplication": [[62, "optimizationapplication"]], "SKModel": [[63, "skmodel"]], "SetPacking": [[64, "setpacking"]], "StableSet": [[65, "stableset"]], "Tsp": [[66, "tsp"]], "VehicleRouting": [[67, "vehiclerouting"]], "VertexCover": [[68, "vertexcover"]], "InequalityToEquality": [[69, "inequalitytoequality"], [93, "InequalityToEquality"]], "IntegerToBinary": [[70, "integertobinary"], [93, "IntegerToBinary"]], "LinearEqualityToPenalty": [[71, "linearequalitytopenalty"], [93, "LinearEqualityToPenalty"]], "LinearInequalityToPenalty": [[72, "linearinequalitytopenalty"]], "MaximizeToMinimize": [[73, "maximizetominimize"]], "MinimizeToMaximize": [[74, "minimizetomaximize"]], "QuadraticProgramConverter": [[75, "quadraticprogramconverter"]], "QuadraticProgramToQubo": [[76, "quadraticprogramtoqubo"]], "INFINITY": [[77, "infinity"]], "Constraint": [[78, "constraint"]], "LinearConstraint": [[79, "linearconstraint"]], "LinearExpression": [[80, "linearexpression"]], "QuadraticConstraint": [[81, "quadraticconstraint"]], "QuadraticExpression": [[82, "quadraticexpression"]], "QuadraticObjective": [[83, "quadraticobjective"]], "QuadraticProgramElement": [[84, "quadraticprogramelement"]], "Variable": [[85, "variable"]], "from_docplex_mp": [[86, "from-docplex-mp"]], "from_gurobipy": [[87, "from-gurobipy"]], "from_ising": [[88, "from-ising"]], "to_docplex_mp": [[89, "to-docplex-mp"]], "to_gurobipy": [[90, "to-gurobipy"]], "to_ising": [[91, "to-ising"]], "Quadratic Programs": [[92, "Quadratic-Programs"]], "Introduction": [[92, "Introduction"], [94, "Introduction"], [95, "Introduction"], [96, "Introduction"], [97, "Introduction"], [99, "Introduction"], [100, "Introduction"], [101, "Introduction"]], "Loading a QuadraticProgram from an LP file": [[92, "Loading-a-QuadraticProgram-from-an-LP-file"]], "Loading a QuadraticProgram from a docplex model": [[92, "Loading-a-QuadraticProgram-from-a-docplex-model"]], "Directly constructing a QuadraticProgram": [[92, "Directly-constructing-a-QuadraticProgram"]], "Adding/removing linear and quadratic constraints": [[92, "Adding/removing-linear-and-quadratic-constraints"]], "Substituting Variables": [[92, "Substituting-Variables"]], "Converters for Quadratic Programs": [[93, "Converters-for-Quadratic-Programs"]], "Minimum Eigen Optimizer": [[94, "Minimum-Eigen-Optimizer"]], "Converting a QUBO to a SparsePauliOp": [[94, "Converting-a-QUBO-to-a-SparsePauliOp"]], "Solving a QUBO with the MinimumEigenOptimizer": [[94, "Solving-a-QUBO-with-the-MinimumEigenOptimizer"]], "Analysis of Samples": [[94, "Analysis-of-Samples"]], "Grover Optimizer": [[95, "Grover-Optimizer"]], "Grover Adaptive Search": [[95, "Grover-Adaptive-Search"]], "Find the Minimum of a QUBO Problem using GroverOptimizer": [[95, "Find-the-Minimum-of-a-QUBO-Problem-using-GroverOptimizer"]], "Check that GroverOptimizer finds the correct value": [[95, "Check-that-GroverOptimizer-finds-the-correct-value"]], "ADMM Optimizer": [[96, "ADMM-Optimizer"]], "Initialization": [[96, "Initialization"], [98, "Initialization"]], "Example": [[96, "Example"]], "Classical Solution": [[96, "Classical-Solution"]], "Parameters": [[96, "Parameters"]], "Calling 3-ADMM-H algorithm": [[96, "Calling-3-ADMM-H-algorithm"]], "Classical Solver Result": [[96, "Classical-Solver-Result"]], "Quantum Solution": [[96, "Quantum-Solution"]], "Quantum Solver Results": [[96, "Quantum-Solver-Results"]], "Max-Cut and Traveling Salesman Problem": [[97, "Max-Cut-and-Traveling-Salesman-Problem"]], "Weighted Max-Cut": [[97, "Weighted-Max-Cut"]], "Approximate Universal Quantum Computing for Optimization Problems": [[97, "Approximate-Universal-Quantum-Computing-for-Optimization-Problems"]], "Application classes": [[97, "Application-classes"]], "Max-Cut problem": [[97, "Max-Cut-problem"]], "Brute force approach": [[97, "Brute-force-approach"], [97, "id2"]], "Mapping to the Ising problem": [[97, "Mapping-to-the-Ising-problem"], [97, "id3"]], "Checking that the full Hamiltonian gives the right cost": [[97, "Checking-that-the-full-Hamiltonian-gives-the-right-cost"], [97, "id4"]], "Running it on quantum computer": [[97, "Running-it-on-quantum-computer"], [97, "id5"]], "Traveling Salesman Problem": [[97, "Traveling-Salesman-Problem"]], "Vehicle Routing": [[98, "Vehicle-Routing"]], "The Introduction": [[98, "The-Introduction"]], "The Model": [[98, "The-Model"]], "Classical solution": [[98, "Classical-solution"]], "Quantum solution": [[98, "Quantum-solution"]], "Construct the Ising Hamiltonian": [[98, "Construct-the-Ising-Hamiltonian"]], "From Hamiltonian to QP formulation": [[98, "From-Hamiltonian-to-QP-formulation"]], "Classical solution using IBM ILOG CPLEX": [[98, "Classical-solution-using-IBM-ILOG-CPLEX"]], "Quantum solution from the ground up": [[98, "Quantum-solution-from-the-ground-up"]], "Step 1": [[98, "Step-1"]], "Step 2": [[98, "Step-2"]], "Step 3": [[98, "Step-3"]], "Step 4": [[98, "Step-4"]], "Step 5": [[98, "Step-5"]], "Improving Variational Quantum Optimization using CVaR": [[99, "Improving-Variational-Quantum-Optimization-using-CVaR"]], "Portfolio Optimization": [[99, "Portfolio-Optimization"]], "Minimum Eigen Optimizer using SamplingVQE": [[99, "Minimum-Eigen-Optimizer-using-SamplingVQE"]], "Application Classes for Optimization Problems": [[100, "Application-Classes-for-Optimization-Problems"]], "Vertex cover problem": [[100, "Vertex-cover-problem"]], "Knapsack problem": [[100, "Knapsack-problem"]], "How to check the Hamiltonian": [[100, "How-to-check-the-Hamiltonian"]], "Warm-starting quantum optimization": [[101, "Warm-starting-quantum-optimization"]], "Preliminaries: relaxing QUBOs": [[101, "Preliminaries:-relaxing-QUBOs"]], "Standard QAOA": [[101, "Standard-QAOA"]], "Warm-start QAOA": [[101, "Warm-start-QAOA"], [101, "id2"]], "Analysis": [[101, "Analysis"]], "Using Classical Optimization Solvers and Models with Qiskit Optimization": [[102, "Using-Classical-Optimization-Solvers-and-Models-with-Qiskit-Optimization"]], "CplexSolver and GurobiSolver": [[102, "CplexSolver-and-GurobiSolver"]], "Translators between QuadraticProgram and Docplex/Gurobipy": [[102, "Translators-between-QuadraticProgram-and-Docplex/Gurobipy"]], "Indicator constraints of Docplex": [[102, "Indicator-constraints-of-Docplex"]], "Quantum Random Access Optimization": [[103, "Quantum-Random-Access-Optimization"]], "Set up a combinatorial optimization problem": [[103, "Set-up-a-combinatorial-optimization-problem"]], "Encode the problem into a quantum Hamiltonian": [[103, "Encode-the-problem-into-a-quantum-Hamiltonian"]], "Solve the problem using the QuantumRandomAccessOptimizer": [[103, "Solve-the-problem-using-the-QuantumRandomAccessOptimizer"]], "Interpret the solution": [[103, "Interpret-the-solution"]], "Inspect the results of subroutines": [[103, "Inspect-the-results-of-subroutines"]], "Exact Problem Solution with the NumpyMinimumEigensolver": [[103, "Exact-Problem-Solution-with-the-NumpyMinimumEigensolver"]], "Solve the problem using the QuantumRandomAccessOptimizer with MagicRounding": [[103, "Solve-the-problem-using-the-QuantumRandomAccessOptimizer-with-MagicRounding"]], "Alternative: Solve the Problem in Two Explicit Steps": [[103, "Alternative:-Solve-the-Problem-in-Two-Explicit-Steps"]], "Manually solve the relaxed problem.": [[103, "Manually-solve-the-relaxed-problem."]], "Manually perform rounding on the relaxed problem results": [[103, "Manually-perform-rounding-on-the-relaxed-problem-results"]], "Appendix": [[103, "Appendix"]], "How to verify correctness of your encoding": [[103, "How-to-verify-correctness-of-your-encoding"]], "Optimization Tutorials": [[104, "optimization-tutorials"]]}, "indexentries": {"module": [[0, "module-qiskit_optimization"], [1, "module-qiskit_optimization.algorithms"], [2, "module-qiskit_optimization.algorithms.qrao"], [3, "module-qiskit_optimization.applications"], [4, "module-qiskit_optimization.converters"], [5, "module-qiskit_optimization.problems"], [6, "module-qiskit_optimization.translators"]], "qiskit_optimization": [[0, "module-qiskit_optimization"]], "qiskit_optimization.algorithms": [[1, "module-qiskit_optimization.algorithms"]], "qiskit_optimization.algorithms.qrao": [[2, "module-qiskit_optimization.algorithms.qrao"]], "qiskit_optimization.applications": [[3, "module-qiskit_optimization.applications"]], "qiskit_optimization.converters": [[4, "module-qiskit_optimization.converters"]], "qiskit_optimization.problems": [[5, "module-qiskit_optimization.problems"]], "qiskit_optimization.translators": [[6, "module-qiskit_optimization.translators"]], "qiskitoptimizationerror": [[15, "qiskit_optimization.QiskitOptimizationError"]], "with_traceback() (qiskitoptimizationerror method)": [[15, "qiskit_optimization.QiskitOptimizationError.with_traceback"]], "quadraticprogram (class in qiskit_optimization)": [[16, "qiskit_optimization.QuadraticProgram"]], "binary_var() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.binary_var"]], "binary_var_dict() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.binary_var_dict"]], "binary_var_list() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.binary_var_list"]], "clear() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.clear"]], "continuous_var() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.continuous_var"]], "continuous_var_dict() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.continuous_var_dict"]], "continuous_var_list() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.continuous_var_list"]], "export_as_lp_string() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.export_as_lp_string"]], "from_ising() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.from_ising"]], "get_feasibility_info() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.get_feasibility_info"]], "get_linear_constraint() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.get_linear_constraint"]], "get_num_binary_vars() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.get_num_binary_vars"]], "get_num_continuous_vars() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.get_num_continuous_vars"]], "get_num_integer_vars() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.get_num_integer_vars"]], "get_num_linear_constraints() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.get_num_linear_constraints"]], "get_num_quadratic_constraints() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.get_num_quadratic_constraints"]], "get_num_vars() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.get_num_vars"]], "get_quadratic_constraint() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.get_quadratic_constraint"]], "get_variable() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.get_variable"]], "integer_var() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.integer_var"]], "integer_var_dict() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.integer_var_dict"]], "integer_var_list() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.integer_var_list"]], "is_feasible() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.is_feasible"]], "linear_constraint() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.linear_constraint"]], "linear_constraints (quadraticprogram attribute)": [[16, "qiskit_optimization.QuadraticProgram.linear_constraints"]], "linear_constraints_index (quadraticprogram attribute)": [[16, "qiskit_optimization.QuadraticProgram.linear_constraints_index"]], "maximize() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.maximize"]], "minimize() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.minimize"]], "name (quadraticprogram attribute)": [[16, "qiskit_optimization.QuadraticProgram.name"]], "objective (quadraticprogram attribute)": [[16, "qiskit_optimization.QuadraticProgram.objective"]], "prettyprint() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.prettyprint"]], "quadratic_constraint() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.quadratic_constraint"]], "quadratic_constraints (quadraticprogram attribute)": [[16, "qiskit_optimization.QuadraticProgram.quadratic_constraints"]], "quadratic_constraints_index (quadraticprogram attribute)": [[16, "qiskit_optimization.QuadraticProgram.quadratic_constraints_index"]], "read_from_lp_file() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.read_from_lp_file"]], "remove_linear_constraint() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.remove_linear_constraint"]], "remove_quadratic_constraint() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.remove_quadratic_constraint"]], "status (quadraticprogram attribute)": [[16, "qiskit_optimization.QuadraticProgram.status"]], "substitute_variables() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.substitute_variables"]], "to_ising() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.to_ising"]], "variables (quadraticprogram attribute)": [[16, "qiskit_optimization.QuadraticProgram.variables"]], "variables_index (quadraticprogram attribute)": [[16, "qiskit_optimization.QuadraticProgram.variables_index"]], "write_to_lp_file() (quadraticprogram method)": [[16, "qiskit_optimization.QuadraticProgram.write_to_lp_file"]], "admmoptimizationresult (class in qiskit_optimization.algorithms)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult"]], "fval (admmoptimizationresult attribute)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.fval"]], "get_correlations() (admmoptimizationresult method)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.get_correlations"]], "prettyprint() (admmoptimizationresult method)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.prettyprint"]], "raw_results (admmoptimizationresult attribute)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.raw_results"]], "samples (admmoptimizationresult attribute)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.samples"]], "state (admmoptimizationresult attribute)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.state"]], "status (admmoptimizationresult attribute)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.status"]], "variable_names (admmoptimizationresult attribute)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.variable_names"]], "variables (admmoptimizationresult attribute)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.variables"]], "variables_dict (admmoptimizationresult attribute)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.variables_dict"]], "x (admmoptimizationresult attribute)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.x"]], "admmoptimizer (class in qiskit_optimization.algorithms)": [[18, "qiskit_optimization.algorithms.ADMMOptimizer"]], "get_compatibility_msg() (admmoptimizer method)": [[18, "qiskit_optimization.algorithms.ADMMOptimizer.get_compatibility_msg"]], "is_compatible() (admmoptimizer method)": [[18, "qiskit_optimization.algorithms.ADMMOptimizer.is_compatible"]], "parameters (admmoptimizer attribute)": [[18, "qiskit_optimization.algorithms.ADMMOptimizer.parameters"]], "solve() (admmoptimizer method)": [[18, "qiskit_optimization.algorithms.ADMMOptimizer.solve"]], "admmparameters (class in qiskit_optimization.algorithms)": [[19, "qiskit_optimization.algorithms.ADMMParameters"]], "admmstate (class in qiskit_optimization.algorithms)": [[20, "qiskit_optimization.algorithms.ADMMState"]], "baseaggregator (class in qiskit_optimization.algorithms)": [[21, "qiskit_optimization.algorithms.BaseAggregator"]], "aggregate() (baseaggregator method)": [[21, "qiskit_optimization.algorithms.BaseAggregator.aggregate"]], "cobylaoptimizer (class in qiskit_optimization.algorithms)": [[22, "qiskit_optimization.algorithms.CobylaOptimizer"]], "clip (cobylaoptimizer attribute)": [[22, "qiskit_optimization.algorithms.CobylaOptimizer.clip"]], "get_compatibility_msg() (cobylaoptimizer method)": [[22, "qiskit_optimization.algorithms.CobylaOptimizer.get_compatibility_msg"]], "is_compatible() (cobylaoptimizer method)": [[22, "qiskit_optimization.algorithms.CobylaOptimizer.is_compatible"]], "multi_start_solve() (cobylaoptimizer method)": [[22, "qiskit_optimization.algorithms.CobylaOptimizer.multi_start_solve"]], "solve() (cobylaoptimizer method)": [[22, "qiskit_optimization.algorithms.CobylaOptimizer.solve"]], "trials (cobylaoptimizer attribute)": [[22, "qiskit_optimization.algorithms.CobylaOptimizer.trials"]], "cplexoptimizer (class in qiskit_optimization.algorithms)": [[23, "qiskit_optimization.algorithms.CplexOptimizer"]], "cplex_parameters (cplexoptimizer attribute)": [[23, "qiskit_optimization.algorithms.CplexOptimizer.cplex_parameters"]], "disp (cplexoptimizer attribute)": [[23, "qiskit_optimization.algorithms.CplexOptimizer.disp"]], "get_compatibility_msg() (cplexoptimizer method)": [[23, "qiskit_optimization.algorithms.CplexOptimizer.get_compatibility_msg"]], "is_compatible() (cplexoptimizer method)": [[23, "qiskit_optimization.algorithms.CplexOptimizer.is_compatible"]], "is_cplex_installed() (cplexoptimizer static method)": [[23, "qiskit_optimization.algorithms.CplexOptimizer.is_cplex_installed"]], "solve() (cplexoptimizer method)": [[23, "qiskit_optimization.algorithms.CplexOptimizer.solve"]], "goemanswilliamsonoptimizationresult (class in qiskit_optimization.algorithms)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult"]], "fval (goemanswilliamsonoptimizationresult attribute)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.fval"]], "get_correlations() (goemanswilliamsonoptimizationresult method)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.get_correlations"]], "prettyprint() (goemanswilliamsonoptimizationresult method)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.prettyprint"]], "raw_results (goemanswilliamsonoptimizationresult attribute)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.raw_results"]], "samples (goemanswilliamsonoptimizationresult attribute)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.samples"]], "sdp_solution (goemanswilliamsonoptimizationresult attribute)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.sdp_solution"]], "status (goemanswilliamsonoptimizationresult attribute)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.status"]], "variable_names (goemanswilliamsonoptimizationresult attribute)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.variable_names"]], "variables (goemanswilliamsonoptimizationresult attribute)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.variables"]], "variables_dict (goemanswilliamsonoptimizationresult attribute)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.variables_dict"]], "x (goemanswilliamsonoptimizationresult attribute)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.x"]], "goemanswilliamsonoptimizer (class in qiskit_optimization.algorithms)": [[25, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizer"]], "get_compatibility_msg() (goemanswilliamsonoptimizer method)": [[25, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.get_compatibility_msg"]], "is_compatible() (goemanswilliamsonoptimizer method)": [[25, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.is_compatible"]], "max_cut_value() (goemanswilliamsonoptimizer static method)": [[25, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.max_cut_value"]], "solve() (goemanswilliamsonoptimizer method)": [[25, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.solve"]], "groveroptimizationresult (class in qiskit_optimization.algorithms)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult"]], "fval (groveroptimizationresult attribute)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.fval"]], "get_correlations() (groveroptimizationresult method)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.get_correlations"]], "intermediate_fval (groveroptimizationresult attribute)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.intermediate_fval"]], "n_input_qubits (groveroptimizationresult attribute)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.n_input_qubits"]], "n_output_qubits (groveroptimizationresult attribute)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.n_output_qubits"]], "operation_counts (groveroptimizationresult attribute)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.operation_counts"]], "prettyprint() (groveroptimizationresult method)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.prettyprint"]], "raw_results (groveroptimizationresult attribute)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.raw_results"]], "raw_samples (groveroptimizationresult attribute)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.raw_samples"]], "samples (groveroptimizationresult attribute)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.samples"]], "status (groveroptimizationresult attribute)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.status"]], "threshold (groveroptimizationresult attribute)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.threshold"]], "variable_names (groveroptimizationresult attribute)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.variable_names"]], "variables (groveroptimizationresult attribute)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.variables"]], "variables_dict (groveroptimizationresult attribute)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.variables_dict"]], "x (groveroptimizationresult attribute)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.x"]], "groveroptimizer (class in qiskit_optimization.algorithms)": [[27, "qiskit_optimization.algorithms.GroverOptimizer"]], "get_compatibility_msg() (groveroptimizer method)": [[27, "qiskit_optimization.algorithms.GroverOptimizer.get_compatibility_msg"]], "is_compatible() (groveroptimizer method)": [[27, "qiskit_optimization.algorithms.GroverOptimizer.is_compatible"]], "solve() (groveroptimizer method)": [[27, "qiskit_optimization.algorithms.GroverOptimizer.solve"]], "gurobioptimizer (class in qiskit_optimization.algorithms)": [[28, "qiskit_optimization.algorithms.GurobiOptimizer"]], "disp (gurobioptimizer attribute)": [[28, "qiskit_optimization.algorithms.GurobiOptimizer.disp"]], "get_compatibility_msg() (gurobioptimizer method)": [[28, "qiskit_optimization.algorithms.GurobiOptimizer.get_compatibility_msg"]], "is_compatible() (gurobioptimizer method)": [[28, "qiskit_optimization.algorithms.GurobiOptimizer.is_compatible"]], "is_gurobi_installed() (gurobioptimizer static method)": [[28, "qiskit_optimization.algorithms.GurobiOptimizer.is_gurobi_installed"]], "solve() (gurobioptimizer method)": [[28, "qiskit_optimization.algorithms.GurobiOptimizer.solve"]], "all_iterations (intermediateresult attribute)": [[29, "qiskit_optimization.algorithms.IntermediateResult.ALL_ITERATIONS"]], "intermediateresult (class in qiskit_optimization.algorithms)": [[29, "qiskit_optimization.algorithms.IntermediateResult"]], "last_iteration (intermediateresult attribute)": [[29, "qiskit_optimization.algorithms.IntermediateResult.LAST_ITERATION"]], "no_iterations (intermediateresult attribute)": [[29, "qiskit_optimization.algorithms.IntermediateResult.NO_ITERATIONS"]], "meanaggregator (class in qiskit_optimization.algorithms)": [[30, "qiskit_optimization.algorithms.MeanAggregator"]], "aggregate() (meanaggregator method)": [[30, "qiskit_optimization.algorithms.MeanAggregator.aggregate"]], "minimumeigenoptimizationresult (class in qiskit_optimization.algorithms)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult"]], "fval (minimumeigenoptimizationresult attribute)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.fval"]], "get_correlations() (minimumeigenoptimizationresult method)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.get_correlations"]], "min_eigen_solver_result (minimumeigenoptimizationresult attribute)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.min_eigen_solver_result"]], "prettyprint() (minimumeigenoptimizationresult method)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.prettyprint"]], "raw_results (minimumeigenoptimizationresult attribute)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.raw_results"]], "raw_samples (minimumeigenoptimizationresult attribute)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.raw_samples"]], "samples (minimumeigenoptimizationresult attribute)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.samples"]], "status (minimumeigenoptimizationresult attribute)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.status"]], "variable_names (minimumeigenoptimizationresult attribute)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.variable_names"]], "variables (minimumeigenoptimizationresult attribute)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.variables"]], "variables_dict (minimumeigenoptimizationresult attribute)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.variables_dict"]], "x (minimumeigenoptimizationresult attribute)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.x"]], "minimumeigenoptimizer (class in qiskit_optimization.algorithms)": [[32, "qiskit_optimization.algorithms.MinimumEigenOptimizer"]], "get_compatibility_msg() (minimumeigenoptimizer method)": [[32, "qiskit_optimization.algorithms.MinimumEigenOptimizer.get_compatibility_msg"]], "is_compatible() (minimumeigenoptimizer method)": [[32, "qiskit_optimization.algorithms.MinimumEigenOptimizer.is_compatible"]], "min_eigen_solver (minimumeigenoptimizer attribute)": [[32, "qiskit_optimization.algorithms.MinimumEigenOptimizer.min_eigen_solver"]], "solve() (minimumeigenoptimizer method)": [[32, "qiskit_optimization.algorithms.MinimumEigenOptimizer.solve"]], "multistartoptimizer (class in qiskit_optimization.algorithms)": [[33, "qiskit_optimization.algorithms.MultiStartOptimizer"]], "clip (multistartoptimizer attribute)": [[33, "qiskit_optimization.algorithms.MultiStartOptimizer.clip"]], "get_compatibility_msg() (multistartoptimizer method)": [[33, "qiskit_optimization.algorithms.MultiStartOptimizer.get_compatibility_msg"]], "is_compatible() (multistartoptimizer method)": [[33, "qiskit_optimization.algorithms.MultiStartOptimizer.is_compatible"]], "multi_start_solve() (multistartoptimizer method)": [[33, "qiskit_optimization.algorithms.MultiStartOptimizer.multi_start_solve"]], "solve() (multistartoptimizer method)": [[33, "qiskit_optimization.algorithms.MultiStartOptimizer.solve"]], "trials (multistartoptimizer attribute)": [[33, "qiskit_optimization.algorithms.MultiStartOptimizer.trials"]], "optimizationalgorithm (class in qiskit_optimization.algorithms)": [[34, "qiskit_optimization.algorithms.OptimizationAlgorithm"]], "get_compatibility_msg() (optimizationalgorithm method)": [[34, "qiskit_optimization.algorithms.OptimizationAlgorithm.get_compatibility_msg"]], "is_compatible() (optimizationalgorithm method)": [[34, "qiskit_optimization.algorithms.OptimizationAlgorithm.is_compatible"]], "solve() (optimizationalgorithm method)": [[34, "qiskit_optimization.algorithms.OptimizationAlgorithm.solve"]], "optimizationresult (class in qiskit_optimization.algorithms)": [[35, "qiskit_optimization.algorithms.OptimizationResult"]], "fval (optimizationresult attribute)": [[35, "qiskit_optimization.algorithms.OptimizationResult.fval"]], "get_correlations() (optimizationresult method)": [[35, "qiskit_optimization.algorithms.OptimizationResult.get_correlations"]], "prettyprint() (optimizationresult method)": [[35, "qiskit_optimization.algorithms.OptimizationResult.prettyprint"]], "raw_results (optimizationresult attribute)": [[35, "qiskit_optimization.algorithms.OptimizationResult.raw_results"]], "samples (optimizationresult attribute)": [[35, "qiskit_optimization.algorithms.OptimizationResult.samples"]], "status (optimizationresult attribute)": [[35, "qiskit_optimization.algorithms.OptimizationResult.status"]], "variable_names (optimizationresult attribute)": [[35, "qiskit_optimization.algorithms.OptimizationResult.variable_names"]], "variables (optimizationresult attribute)": [[35, "qiskit_optimization.algorithms.OptimizationResult.variables"]], "variables_dict (optimizationresult attribute)": [[35, "qiskit_optimization.algorithms.OptimizationResult.variables_dict"]], "x (optimizationresult attribute)": [[35, "qiskit_optimization.algorithms.OptimizationResult.x"]], "failure (optimizationresultstatus attribute)": [[36, "qiskit_optimization.algorithms.OptimizationResultStatus.FAILURE"]], "infeasible (optimizationresultstatus attribute)": [[36, "qiskit_optimization.algorithms.OptimizationResultStatus.INFEASIBLE"]], "optimizationresultstatus (class in qiskit_optimization.algorithms)": [[36, "qiskit_optimization.algorithms.OptimizationResultStatus"]], "success (optimizationresultstatus attribute)": [[36, "qiskit_optimization.algorithms.OptimizationResultStatus.SUCCESS"]], "recursiveminimumeigenoptimizationresult (class in qiskit_optimization.algorithms)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult"]], "fval (recursiveminimumeigenoptimizationresult attribute)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.fval"]], "get_correlations() (recursiveminimumeigenoptimizationresult method)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.get_correlations"]], "history (recursiveminimumeigenoptimizationresult attribute)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.history"]], "prettyprint() (recursiveminimumeigenoptimizationresult method)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.prettyprint"]], "raw_results (recursiveminimumeigenoptimizationresult attribute)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.raw_results"]], "replacements (recursiveminimumeigenoptimizationresult attribute)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.replacements"]], "samples (recursiveminimumeigenoptimizationresult attribute)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.samples"]], "status (recursiveminimumeigenoptimizationresult attribute)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.status"]], "variable_names (recursiveminimumeigenoptimizationresult attribute)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.variable_names"]], "variables (recursiveminimumeigenoptimizationresult attribute)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.variables"]], "variables_dict (recursiveminimumeigenoptimizationresult attribute)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.variables_dict"]], "x (recursiveminimumeigenoptimizationresult attribute)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.x"]], "recursiveminimumeigenoptimizer (class in qiskit_optimization.algorithms)": [[38, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer"]], "get_compatibility_msg() (recursiveminimumeigenoptimizer method)": [[38, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.get_compatibility_msg"]], "is_compatible() (recursiveminimumeigenoptimizer method)": [[38, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.is_compatible"]], "solve() (recursiveminimumeigenoptimizer method)": [[38, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.solve"]], "scipymilpoptimizer (class in qiskit_optimization.algorithms)": [[39, "qiskit_optimization.algorithms.ScipyMilpOptimizer"]], "disp (scipymilpoptimizer attribute)": [[39, "qiskit_optimization.algorithms.ScipyMilpOptimizer.disp"]], "get_compatibility_msg() (scipymilpoptimizer method)": [[39, "qiskit_optimization.algorithms.ScipyMilpOptimizer.get_compatibility_msg"]], "is_compatible() (scipymilpoptimizer method)": [[39, "qiskit_optimization.algorithms.ScipyMilpOptimizer.is_compatible"]], "solve() (scipymilpoptimizer method)": [[39, "qiskit_optimization.algorithms.ScipyMilpOptimizer.solve"]], "slsqpoptimizationresult (class in qiskit_optimization.algorithms)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult"]], "fval (slsqpoptimizationresult attribute)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.fval"]], "fx (slsqpoptimizationresult attribute)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.fx"]], "get_correlations() (slsqpoptimizationresult method)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.get_correlations"]], "imode (slsqpoptimizationresult attribute)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.imode"]], "its (slsqpoptimizationresult attribute)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.its"]], "prettyprint() (slsqpoptimizationresult method)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.prettyprint"]], "raw_results (slsqpoptimizationresult attribute)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.raw_results"]], "samples (slsqpoptimizationresult attribute)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.samples"]], "smode (slsqpoptimizationresult attribute)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.smode"]], "status (slsqpoptimizationresult attribute)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.status"]], "variable_names (slsqpoptimizationresult attribute)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.variable_names"]], "variables (slsqpoptimizationresult attribute)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.variables"]], "variables_dict (slsqpoptimizationresult attribute)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.variables_dict"]], "x (slsqpoptimizationresult attribute)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.x"]], "slsqpoptimizer (class in qiskit_optimization.algorithms)": [[41, "qiskit_optimization.algorithms.SlsqpOptimizer"]], "clip (slsqpoptimizer attribute)": [[41, "qiskit_optimization.algorithms.SlsqpOptimizer.clip"]], "get_compatibility_msg() (slsqpoptimizer method)": [[41, "qiskit_optimization.algorithms.SlsqpOptimizer.get_compatibility_msg"]], "is_compatible() (slsqpoptimizer method)": [[41, "qiskit_optimization.algorithms.SlsqpOptimizer.is_compatible"]], "multi_start_solve() (slsqpoptimizer method)": [[41, "qiskit_optimization.algorithms.SlsqpOptimizer.multi_start_solve"]], "solve() (slsqpoptimizer method)": [[41, "qiskit_optimization.algorithms.SlsqpOptimizer.solve"]], "trials (slsqpoptimizer attribute)": [[41, "qiskit_optimization.algorithms.SlsqpOptimizer.trials"]], "solutionsample (class in qiskit_optimization.algorithms)": [[42, "qiskit_optimization.algorithms.SolutionSample"]], "fval (solutionsample attribute)": [[42, "qiskit_optimization.algorithms.SolutionSample.fval"]], "probability (solutionsample attribute)": [[42, "qiskit_optimization.algorithms.SolutionSample.probability"]], "status (solutionsample attribute)": [[42, "qiskit_optimization.algorithms.SolutionSample.status"]], "x (solutionsample attribute)": [[42, "qiskit_optimization.algorithms.SolutionSample.x"]], "warmstartqaoafactory (class in qiskit_optimization.algorithms)": [[43, "qiskit_optimization.algorithms.WarmStartQAOAFactory"]], "create_initial_state() (warmstartqaoafactory method)": [[43, "qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_state"]], "create_initial_variables() (warmstartqaoafactory method)": [[43, "qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_variables"]], "create_mixer() (warmstartqaoafactory method)": [[43, "qiskit_optimization.algorithms.WarmStartQAOAFactory.create_mixer"]], "warmstartqaoaoptimizer (class in qiskit_optimization.algorithms)": [[44, "qiskit_optimization.algorithms.WarmStartQAOAOptimizer"]], "get_compatibility_msg() (warmstartqaoaoptimizer method)": [[44, "qiskit_optimization.algorithms.WarmStartQAOAOptimizer.get_compatibility_msg"]], "is_compatible() (warmstartqaoaoptimizer method)": [[44, "qiskit_optimization.algorithms.WarmStartQAOAOptimizer.is_compatible"]], "min_eigen_solver (warmstartqaoaoptimizer attribute)": [[44, "qiskit_optimization.algorithms.WarmStartQAOAOptimizer.min_eigen_solver"]], "solve() (warmstartqaoaoptimizer method)": [[44, "qiskit_optimization.algorithms.WarmStartQAOAOptimizer.solve"]], "encodingcommutationverifier (class in qiskit_optimization.algorithms.qrao)": [[45, "qiskit_optimization.algorithms.qrao.EncodingCommutationVerifier"]], "magicrounding (class in qiskit_optimization.algorithms.qrao)": [[46, "qiskit_optimization.algorithms.qrao.MagicRounding"]], "basis_sampling (magicrounding attribute)": [[46, "qiskit_optimization.algorithms.qrao.MagicRounding.basis_sampling"]], "round() (magicrounding method)": [[46, "qiskit_optimization.algorithms.qrao.MagicRounding.round"]], "sampler (magicrounding attribute)": [[46, "qiskit_optimization.algorithms.qrao.MagicRounding.sampler"]], "quantumrandomaccessencoding (class in qiskit_optimization.algorithms.qrao)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding"]], "compression_ratio (quantumrandomaccessencoding attribute)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.compression_ratio"]], "encode() (quantumrandomaccessencoding method)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.encode"]], "freeze() (quantumrandomaccessencoding method)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.freeze"]], "frozen (quantumrandomaccessencoding attribute)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.frozen"]], "max_vars_per_qubit (quantumrandomaccessencoding attribute)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.max_vars_per_qubit"]], "minimum_recovery_probability (quantumrandomaccessencoding attribute)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.minimum_recovery_probability"]], "num_qubits (quantumrandomaccessencoding attribute)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.num_qubits"]], "num_vars (quantumrandomaccessencoding attribute)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.num_vars"]], "offset (quantumrandomaccessencoding attribute)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.offset"]], "problem (quantumrandomaccessencoding attribute)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.problem"]], "q2vars (quantumrandomaccessencoding attribute)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.q2vars"]], "qubit_op (quantumrandomaccessencoding attribute)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.qubit_op"]], "state_preparation_circuit() (quantumrandomaccessencoding method)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.state_preparation_circuit"]], "var2op (quantumrandomaccessencoding attribute)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.var2op"]], "quantumrandomaccessoptimizationresult (class in qiskit_optimization.algorithms.qrao)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult"]], "encoding (quantumrandomaccessoptimizationresult attribute)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.encoding"]], "fval (quantumrandomaccessoptimizationresult attribute)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.fval"]], "get_correlations() (quantumrandomaccessoptimizationresult method)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.get_correlations"]], "prettyprint() (quantumrandomaccessoptimizationresult method)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.prettyprint"]], "raw_results (quantumrandomaccessoptimizationresult attribute)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.raw_results"]], "relaxed_fval (quantumrandomaccessoptimizationresult attribute)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.relaxed_fval"]], "relaxed_result (quantumrandomaccessoptimizationresult attribute)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.relaxed_result"]], "rounding_result (quantumrandomaccessoptimizationresult attribute)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.rounding_result"]], "samples (quantumrandomaccessoptimizationresult attribute)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.samples"]], "status (quantumrandomaccessoptimizationresult attribute)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.status"]], "variable_names (quantumrandomaccessoptimizationresult attribute)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.variable_names"]], "variables (quantumrandomaccessoptimizationresult attribute)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.variables"]], "variables_dict (quantumrandomaccessoptimizationresult attribute)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.variables_dict"]], "x (quantumrandomaccessoptimizationresult attribute)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.x"]], "quantumrandomaccessoptimizer (class in qiskit_optimization.algorithms.qrao)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer"]], "get_compatibility_msg() (quantumrandomaccessoptimizer method)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.get_compatibility_msg"]], "is_compatible() (quantumrandomaccessoptimizer method)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.is_compatible"]], "max_vars_per_qubit (quantumrandomaccessoptimizer attribute)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.max_vars_per_qubit"]], "min_eigen_solver (quantumrandomaccessoptimizer attribute)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.min_eigen_solver"]], "process_result() (quantumrandomaccessoptimizer method)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.process_result"]], "rounding_scheme (quantumrandomaccessoptimizer attribute)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.rounding_scheme"]], "solve() (quantumrandomaccessoptimizer method)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.solve"]], "solve_relaxed() (quantumrandomaccessoptimizer method)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.solve_relaxed"]], "roundingcontext (class in qiskit_optimization.algorithms.qrao)": [[50, "qiskit_optimization.algorithms.qrao.RoundingContext"]], "circuit (roundingcontext attribute)": [[50, "qiskit_optimization.algorithms.qrao.RoundingContext.circuit"]], "encoding (roundingcontext attribute)": [[50, "qiskit_optimization.algorithms.qrao.RoundingContext.encoding"]], "expectation_values (roundingcontext attribute)": [[50, "qiskit_optimization.algorithms.qrao.RoundingContext.expectation_values"]], "roundingresult (class in qiskit_optimization.algorithms.qrao)": [[51, "qiskit_optimization.algorithms.qrao.RoundingResult"]], "bases (roundingresult attribute)": [[51, "qiskit_optimization.algorithms.qrao.RoundingResult.bases"]], "basis_counts (roundingresult attribute)": [[51, "qiskit_optimization.algorithms.qrao.RoundingResult.basis_counts"]], "basis_shots (roundingresult attribute)": [[51, "qiskit_optimization.algorithms.qrao.RoundingResult.basis_shots"]], "expectation_values (roundingresult attribute)": [[51, "qiskit_optimization.algorithms.qrao.RoundingResult.expectation_values"]], "samples (roundingresult attribute)": [[51, "qiskit_optimization.algorithms.qrao.RoundingResult.samples"]], "roundingscheme (class in qiskit_optimization.algorithms.qrao)": [[52, "qiskit_optimization.algorithms.qrao.RoundingScheme"]], "round() (roundingscheme method)": [[52, "qiskit_optimization.algorithms.qrao.RoundingScheme.round"]], "semideterministicrounding (class in qiskit_optimization.algorithms.qrao)": [[53, "qiskit_optimization.algorithms.qrao.SemideterministicRounding"]], "round() (semideterministicrounding method)": [[53, "qiskit_optimization.algorithms.qrao.SemideterministicRounding.round"]], "binpacking (class in qiskit_optimization.applications)": [[54, "qiskit_optimization.applications.BinPacking"]], "get_figure() (binpacking method)": [[54, "qiskit_optimization.applications.BinPacking.get_figure"]], "interpret() (binpacking method)": [[54, "qiskit_optimization.applications.BinPacking.interpret"]], "sample_most_likely() (binpacking static method)": [[54, "qiskit_optimization.applications.BinPacking.sample_most_likely"]], "to_quadratic_program() (binpacking method)": [[54, "qiskit_optimization.applications.BinPacking.to_quadratic_program"]], "clique (class in qiskit_optimization.applications)": [[55, "qiskit_optimization.applications.Clique"]], "draw() (clique method)": [[55, "qiskit_optimization.applications.Clique.draw"]], "graph (clique attribute)": [[55, "qiskit_optimization.applications.Clique.graph"]], "interpret() (clique method)": [[55, "qiskit_optimization.applications.Clique.interpret"]], "sample_most_likely() (clique static method)": [[55, "qiskit_optimization.applications.Clique.sample_most_likely"]], "size (clique attribute)": [[55, "qiskit_optimization.applications.Clique.size"]], "to_quadratic_program() (clique method)": [[55, "qiskit_optimization.applications.Clique.to_quadratic_program"]], "exactcover (class in qiskit_optimization.applications)": [[56, "qiskit_optimization.applications.ExactCover"]], "interpret() (exactcover method)": [[56, "qiskit_optimization.applications.ExactCover.interpret"]], "sample_most_likely() (exactcover static method)": [[56, "qiskit_optimization.applications.ExactCover.sample_most_likely"]], "to_quadratic_program() (exactcover method)": [[56, "qiskit_optimization.applications.ExactCover.to_quadratic_program"]], "graphoptimizationapplication (class in qiskit_optimization.applications)": [[57, "qiskit_optimization.applications.GraphOptimizationApplication"]], "draw() (graphoptimizationapplication method)": [[57, "qiskit_optimization.applications.GraphOptimizationApplication.draw"]], "graph (graphoptimizationapplication attribute)": [[57, "qiskit_optimization.applications.GraphOptimizationApplication.graph"]], "interpret() (graphoptimizationapplication method)": [[57, "qiskit_optimization.applications.GraphOptimizationApplication.interpret"]], "sample_most_likely() (graphoptimizationapplication static method)": [[57, "qiskit_optimization.applications.GraphOptimizationApplication.sample_most_likely"]], "to_quadratic_program() (graphoptimizationapplication method)": [[57, "qiskit_optimization.applications.GraphOptimizationApplication.to_quadratic_program"]], "graphpartition (class in qiskit_optimization.applications)": [[58, "qiskit_optimization.applications.GraphPartition"]], "draw() (graphpartition method)": [[58, "qiskit_optimization.applications.GraphPartition.draw"]], "graph (graphpartition attribute)": [[58, "qiskit_optimization.applications.GraphPartition.graph"]], "interpret() (graphpartition method)": [[58, "qiskit_optimization.applications.GraphPartition.interpret"]], "sample_most_likely() (graphpartition static method)": [[58, "qiskit_optimization.applications.GraphPartition.sample_most_likely"]], "to_quadratic_program() (graphpartition method)": [[58, "qiskit_optimization.applications.GraphPartition.to_quadratic_program"]], "knapsack (class in qiskit_optimization.applications)": [[59, "qiskit_optimization.applications.Knapsack"]], "interpret() (knapsack method)": [[59, "qiskit_optimization.applications.Knapsack.interpret"]], "max_weight (knapsack attribute)": [[59, "qiskit_optimization.applications.Knapsack.max_weight"]], "sample_most_likely() (knapsack static method)": [[59, "qiskit_optimization.applications.Knapsack.sample_most_likely"]], "to_quadratic_program() (knapsack method)": [[59, "qiskit_optimization.applications.Knapsack.to_quadratic_program"]], "maxcut (class in qiskit_optimization.applications)": [[60, "qiskit_optimization.applications.Maxcut"]], "draw() (maxcut method)": [[60, "qiskit_optimization.applications.Maxcut.draw"]], "get_gset_result() (maxcut static method)": [[60, "qiskit_optimization.applications.Maxcut.get_gset_result"]], "graph (maxcut attribute)": [[60, "qiskit_optimization.applications.Maxcut.graph"]], "interpret() (maxcut method)": [[60, "qiskit_optimization.applications.Maxcut.interpret"]], "parse_gset_format() (maxcut static method)": [[60, "qiskit_optimization.applications.Maxcut.parse_gset_format"]], "sample_most_likely() (maxcut static method)": [[60, "qiskit_optimization.applications.Maxcut.sample_most_likely"]], "to_quadratic_program() (maxcut method)": [[60, "qiskit_optimization.applications.Maxcut.to_quadratic_program"]], "numberpartition (class in qiskit_optimization.applications)": [[61, "qiskit_optimization.applications.NumberPartition"]], "interpret() (numberpartition method)": [[61, "qiskit_optimization.applications.NumberPartition.interpret"]], "sample_most_likely() (numberpartition static method)": [[61, "qiskit_optimization.applications.NumberPartition.sample_most_likely"]], "to_quadratic_program() (numberpartition method)": [[61, "qiskit_optimization.applications.NumberPartition.to_quadratic_program"]], "optimizationapplication (class in qiskit_optimization.applications)": [[62, "qiskit_optimization.applications.OptimizationApplication"]], "interpret() (optimizationapplication method)": [[62, "qiskit_optimization.applications.OptimizationApplication.interpret"]], "sample_most_likely() (optimizationapplication static method)": [[62, "qiskit_optimization.applications.OptimizationApplication.sample_most_likely"]], "to_quadratic_program() (optimizationapplication method)": [[62, "qiskit_optimization.applications.OptimizationApplication.to_quadratic_program"]], "skmodel (class in qiskit_optimization.applications)": [[63, "qiskit_optimization.applications.SKModel"]], "disorder() (skmodel method)": [[63, "qiskit_optimization.applications.SKModel.disorder"]], "graph (skmodel attribute)": [[63, "qiskit_optimization.applications.SKModel.graph"]], "interpret() (skmodel method)": [[63, "qiskit_optimization.applications.SKModel.interpret"]], "num_sites (skmodel attribute)": [[63, "qiskit_optimization.applications.SKModel.num_sites"]], "sample_most_likely() (skmodel static method)": [[63, "qiskit_optimization.applications.SKModel.sample_most_likely"]], "to_quadratic_program() (skmodel method)": [[63, "qiskit_optimization.applications.SKModel.to_quadratic_program"]], "setpacking (class in qiskit_optimization.applications)": [[64, "qiskit_optimization.applications.SetPacking"]], "interpret() (setpacking method)": [[64, "qiskit_optimization.applications.SetPacking.interpret"]], "sample_most_likely() (setpacking static method)": [[64, "qiskit_optimization.applications.SetPacking.sample_most_likely"]], "to_quadratic_program() (setpacking method)": [[64, "qiskit_optimization.applications.SetPacking.to_quadratic_program"]], "stableset (class in qiskit_optimization.applications)": [[65, "qiskit_optimization.applications.StableSet"]], "draw() (stableset method)": [[65, "qiskit_optimization.applications.StableSet.draw"]], "graph (stableset attribute)": [[65, "qiskit_optimization.applications.StableSet.graph"]], "interpret() (stableset method)": [[65, "qiskit_optimization.applications.StableSet.interpret"]], "sample_most_likely() (stableset static method)": [[65, "qiskit_optimization.applications.StableSet.sample_most_likely"]], "to_quadratic_program() (stableset method)": [[65, "qiskit_optimization.applications.StableSet.to_quadratic_program"]], "tsp (class in qiskit_optimization.applications)": [[66, "qiskit_optimization.applications.Tsp"]], "create_random_instance() (tsp static method)": [[66, "qiskit_optimization.applications.Tsp.create_random_instance"]], "draw() (tsp method)": [[66, "qiskit_optimization.applications.Tsp.draw"]], "graph (tsp attribute)": [[66, "qiskit_optimization.applications.Tsp.graph"]], "interpret() (tsp method)": [[66, "qiskit_optimization.applications.Tsp.interpret"]], "parse_tsplib_format() (tsp static method)": [[66, "qiskit_optimization.applications.Tsp.parse_tsplib_format"]], "sample_most_likely() (tsp static method)": [[66, "qiskit_optimization.applications.Tsp.sample_most_likely"]], "to_quadratic_program() (tsp method)": [[66, "qiskit_optimization.applications.Tsp.to_quadratic_program"]], "tsp_value() (tsp static method)": [[66, "qiskit_optimization.applications.Tsp.tsp_value"]], "vehiclerouting (class in qiskit_optimization.applications)": [[67, "qiskit_optimization.applications.VehicleRouting"]], "create_random_instance() (vehiclerouting static method)": [[67, "qiskit_optimization.applications.VehicleRouting.create_random_instance"]], "depot (vehiclerouting attribute)": [[67, "qiskit_optimization.applications.VehicleRouting.depot"]], "draw() (vehiclerouting method)": [[67, "qiskit_optimization.applications.VehicleRouting.draw"]], "graph (vehiclerouting attribute)": [[67, "qiskit_optimization.applications.VehicleRouting.graph"]], "interpret() (vehiclerouting method)": [[67, "qiskit_optimization.applications.VehicleRouting.interpret"]], "num_vehicles (vehiclerouting attribute)": [[67, "qiskit_optimization.applications.VehicleRouting.num_vehicles"]], "sample_most_likely() (vehiclerouting static method)": [[67, "qiskit_optimization.applications.VehicleRouting.sample_most_likely"]], "to_quadratic_program() (vehiclerouting method)": [[67, "qiskit_optimization.applications.VehicleRouting.to_quadratic_program"]], "vertexcover (class in qiskit_optimization.applications)": [[68, "qiskit_optimization.applications.VertexCover"]], "draw() (vertexcover method)": [[68, "qiskit_optimization.applications.VertexCover.draw"]], "graph (vertexcover attribute)": [[68, "qiskit_optimization.applications.VertexCover.graph"]], "interpret() (vertexcover method)": [[68, "qiskit_optimization.applications.VertexCover.interpret"]], "sample_most_likely() (vertexcover static method)": [[68, "qiskit_optimization.applications.VertexCover.sample_most_likely"]], "to_quadratic_program() (vertexcover method)": [[68, "qiskit_optimization.applications.VertexCover.to_quadratic_program"]], "inequalitytoequality (class in qiskit_optimization.converters)": [[69, "qiskit_optimization.converters.InequalityToEquality"]], "convert() (inequalitytoequality method)": [[69, "qiskit_optimization.converters.InequalityToEquality.convert"]], "interpret() (inequalitytoequality method)": [[69, "qiskit_optimization.converters.InequalityToEquality.interpret"]], "mode (inequalitytoequality attribute)": [[69, "qiskit_optimization.converters.InequalityToEquality.mode"]], "integertobinary (class in qiskit_optimization.converters)": [[70, "qiskit_optimization.converters.IntegerToBinary"]], "convert() (integertobinary method)": [[70, "qiskit_optimization.converters.IntegerToBinary.convert"]], "interpret() (integertobinary method)": [[70, "qiskit_optimization.converters.IntegerToBinary.interpret"]], "linearequalitytopenalty (class in qiskit_optimization.converters)": [[71, "qiskit_optimization.converters.LinearEqualityToPenalty"]], "convert() (linearequalitytopenalty method)": [[71, "qiskit_optimization.converters.LinearEqualityToPenalty.convert"]], "interpret() (linearequalitytopenalty method)": [[71, "qiskit_optimization.converters.LinearEqualityToPenalty.interpret"]], "penalty (linearequalitytopenalty attribute)": [[71, "qiskit_optimization.converters.LinearEqualityToPenalty.penalty"]], "linearinequalitytopenalty (class in qiskit_optimization.converters)": [[72, "qiskit_optimization.converters.LinearInequalityToPenalty"]], "convert() (linearinequalitytopenalty method)": [[72, "qiskit_optimization.converters.LinearInequalityToPenalty.convert"]], "interpret() (linearinequalitytopenalty method)": [[72, "qiskit_optimization.converters.LinearInequalityToPenalty.interpret"]], "penalty (linearinequalitytopenalty attribute)": [[72, "qiskit_optimization.converters.LinearInequalityToPenalty.penalty"]], "maximizetominimize (class in qiskit_optimization.converters)": [[73, "qiskit_optimization.converters.MaximizeToMinimize"]], "convert() (maximizetominimize method)": [[73, "qiskit_optimization.converters.MaximizeToMinimize.convert"]], "interpret() (maximizetominimize method)": [[73, "qiskit_optimization.converters.MaximizeToMinimize.interpret"]], "minimizetomaximize (class in qiskit_optimization.converters)": [[74, "qiskit_optimization.converters.MinimizeToMaximize"]], "convert() (minimizetomaximize method)": [[74, "qiskit_optimization.converters.MinimizeToMaximize.convert"]], "interpret() (minimizetomaximize method)": [[74, "qiskit_optimization.converters.MinimizeToMaximize.interpret"]], "quadraticprogramconverter (class in qiskit_optimization.converters)": [[75, "qiskit_optimization.converters.QuadraticProgramConverter"]], "convert() (quadraticprogramconverter method)": [[75, "qiskit_optimization.converters.QuadraticProgramConverter.convert"]], "interpret() (quadraticprogramconverter method)": [[75, "qiskit_optimization.converters.QuadraticProgramConverter.interpret"]], "quadraticprogramtoqubo (class in qiskit_optimization.converters)": [[76, "qiskit_optimization.converters.QuadraticProgramToQubo"]], "convert() (quadraticprogramtoqubo method)": [[76, "qiskit_optimization.converters.QuadraticProgramToQubo.convert"]], "get_compatibility_msg() (quadraticprogramtoqubo static method)": [[76, "qiskit_optimization.converters.QuadraticProgramToQubo.get_compatibility_msg"]], "interpret() (quadraticprogramtoqubo method)": [[76, "qiskit_optimization.converters.QuadraticProgramToQubo.interpret"]], "is_compatible() (quadraticprogramtoqubo method)": [[76, "qiskit_optimization.converters.QuadraticProgramToQubo.is_compatible"]], "penalty (quadraticprogramtoqubo attribute)": [[76, "qiskit_optimization.converters.QuadraticProgramToQubo.penalty"]], "infinity (in module qiskit_optimization.infinity)": [[77, "qiskit_optimization.infinity.INFINITY"]], "constraint (class in qiskit_optimization.problems)": [[78, "qiskit_optimization.problems.Constraint"]], "evaluate() (constraint method)": [[78, "qiskit_optimization.problems.Constraint.evaluate"]], "name (constraint attribute)": [[78, "qiskit_optimization.problems.Constraint.name"]], "quadratic_program (constraint attribute)": [[78, "qiskit_optimization.problems.Constraint.quadratic_program"]], "rhs (constraint attribute)": [[78, "qiskit_optimization.problems.Constraint.rhs"]], "sense (constraint attribute)": [[78, "qiskit_optimization.problems.Constraint.sense"]], "linearconstraint (class in qiskit_optimization.problems)": [[79, "qiskit_optimization.problems.LinearConstraint"]], "evaluate() (linearconstraint method)": [[79, "qiskit_optimization.problems.LinearConstraint.evaluate"]], "linear (linearconstraint attribute)": [[79, "qiskit_optimization.problems.LinearConstraint.linear"]], "name (linearconstraint attribute)": [[79, "qiskit_optimization.problems.LinearConstraint.name"]], "quadratic_program (linearconstraint attribute)": [[79, "qiskit_optimization.problems.LinearConstraint.quadratic_program"]], "rhs (linearconstraint attribute)": [[79, "qiskit_optimization.problems.LinearConstraint.rhs"]], "sense (linearconstraint attribute)": [[79, "qiskit_optimization.problems.LinearConstraint.sense"]], "linearexpression (class in qiskit_optimization.problems)": [[80, "qiskit_optimization.problems.LinearExpression"]], "bounds (linearexpression attribute)": [[80, "qiskit_optimization.problems.LinearExpression.bounds"]], "coefficients (linearexpression attribute)": [[80, "qiskit_optimization.problems.LinearExpression.coefficients"]], "evaluate() (linearexpression method)": [[80, "qiskit_optimization.problems.LinearExpression.evaluate"]], "evaluate_gradient() (linearexpression method)": [[80, "qiskit_optimization.problems.LinearExpression.evaluate_gradient"]], "quadratic_program (linearexpression attribute)": [[80, "qiskit_optimization.problems.LinearExpression.quadratic_program"]], "to_array() (linearexpression method)": [[80, "qiskit_optimization.problems.LinearExpression.to_array"]], "to_dict() (linearexpression method)": [[80, "qiskit_optimization.problems.LinearExpression.to_dict"]], "quadraticconstraint (class in qiskit_optimization.problems)": [[81, "qiskit_optimization.problems.QuadraticConstraint"]], "evaluate() (quadraticconstraint method)": [[81, "qiskit_optimization.problems.QuadraticConstraint.evaluate"]], "linear (quadraticconstraint attribute)": [[81, "qiskit_optimization.problems.QuadraticConstraint.linear"]], "name (quadraticconstraint attribute)": [[81, "qiskit_optimization.problems.QuadraticConstraint.name"]], "quadratic (quadraticconstraint attribute)": [[81, "qiskit_optimization.problems.QuadraticConstraint.quadratic"]], "quadratic_program (quadraticconstraint attribute)": [[81, "qiskit_optimization.problems.QuadraticConstraint.quadratic_program"]], "rhs (quadraticconstraint attribute)": [[81, "qiskit_optimization.problems.QuadraticConstraint.rhs"]], "sense (quadraticconstraint attribute)": [[81, "qiskit_optimization.problems.QuadraticConstraint.sense"]], "quadraticexpression (class in qiskit_optimization.problems)": [[82, "qiskit_optimization.problems.QuadraticExpression"]], "bounds (quadraticexpression attribute)": [[82, "qiskit_optimization.problems.QuadraticExpression.bounds"]], "coefficients (quadraticexpression attribute)": [[82, "qiskit_optimization.problems.QuadraticExpression.coefficients"]], "evaluate() (quadraticexpression method)": [[82, "qiskit_optimization.problems.QuadraticExpression.evaluate"]], "evaluate_gradient() (quadraticexpression method)": [[82, "qiskit_optimization.problems.QuadraticExpression.evaluate_gradient"]], "quadratic_program (quadraticexpression attribute)": [[82, "qiskit_optimization.problems.QuadraticExpression.quadratic_program"]], "to_array() (quadraticexpression method)": [[82, "qiskit_optimization.problems.QuadraticExpression.to_array"]], "to_dict() (quadraticexpression method)": [[82, "qiskit_optimization.problems.QuadraticExpression.to_dict"]], "quadraticobjective (class in qiskit_optimization.problems)": [[83, "qiskit_optimization.problems.QuadraticObjective"]], "constant (quadraticobjective attribute)": [[83, "qiskit_optimization.problems.QuadraticObjective.constant"]], "evaluate() (quadraticobjective method)": [[83, "qiskit_optimization.problems.QuadraticObjective.evaluate"]], "evaluate_gradient() (quadraticobjective method)": [[83, "qiskit_optimization.problems.QuadraticObjective.evaluate_gradient"]], "linear (quadraticobjective attribute)": [[83, "qiskit_optimization.problems.QuadraticObjective.linear"]], "quadratic (quadraticobjective attribute)": [[83, "qiskit_optimization.problems.QuadraticObjective.quadratic"]], "quadratic_program (quadraticobjective attribute)": [[83, "qiskit_optimization.problems.QuadraticObjective.quadratic_program"]], "sense (quadraticobjective attribute)": [[83, "qiskit_optimization.problems.QuadraticObjective.sense"]], "quadraticprogramelement (class in qiskit_optimization.problems)": [[84, "qiskit_optimization.problems.QuadraticProgramElement"]], "quadratic_program (quadraticprogramelement attribute)": [[84, "qiskit_optimization.problems.QuadraticProgramElement.quadratic_program"]], "variable (class in qiskit_optimization.problems)": [[85, "qiskit_optimization.problems.Variable"]], "as_tuple() (variable method)": [[85, "qiskit_optimization.problems.Variable.as_tuple"]], "lowerbound (variable attribute)": [[85, "qiskit_optimization.problems.Variable.lowerbound"]], "name (variable attribute)": [[85, "qiskit_optimization.problems.Variable.name"]], "quadratic_program (variable attribute)": [[85, "qiskit_optimization.problems.Variable.quadratic_program"]], "upperbound (variable attribute)": [[85, "qiskit_optimization.problems.Variable.upperbound"]], "vartype (variable attribute)": [[85, "qiskit_optimization.problems.Variable.vartype"]], "from_docplex_mp() (in module qiskit_optimization.translators)": [[86, "qiskit_optimization.translators.from_docplex_mp"]], "from_gurobipy() (in module qiskit_optimization.translators)": [[87, "qiskit_optimization.translators.from_gurobipy"]], "from_ising() (in module qiskit_optimization.translators)": [[88, "qiskit_optimization.translators.from_ising"]], "to_docplex_mp() (in module qiskit_optimization.translators)": [[89, "qiskit_optimization.translators.to_docplex_mp"]], "to_gurobipy() (in module qiskit_optimization.translators)": [[90, "qiskit_optimization.translators.to_gurobipy"]], "to_ising() (in module qiskit_optimization.translators)": [[91, "qiskit_optimization.translators.to_ising"]]}})